---
title: "Categorical data"
author: Vladimir Buskin
format:
  html:
    self-contained: false
    theme: default
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 3
    scrollable: true
editor: visual
bibliography: R.bib
---

## Preparation

Please download the file "Paquot_Larsson_2020_data.xlsx"
[@paquotDescriptiveStatisticsVisualization2020][^categorical_data-1] and
store it in the same folder as your currently active R-script. Then run
the code lines below:

[^categorical_data-1]: The original supplementary materials can be
    downloaded from the publisher's
    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)
    \[Last accessed April 28, 2024\].

```{r, echo = TRUE, output = TRUE}
# Libraries
library("readxl") # for loading Excel data
library("tidyverse") # data manipulation and visualisation

# Load data from working directory
cl.order <- read_xlsx("Paquot_Larsson_2020_data.xlsx")

```

## Frequency tables

### One variable

Each categorical variable in the data frame is made up of two or more
categories. A simple descriptive measure is the frequency of each
category. The table below indicates how often each clause order occurs
in the `ORDER` column.

```{r}
order_freq1 <- table(cl.order$ORDER) 

print(order_freq1)
```

The notation `cl.order$ORDER` subsets the `cl.order` according to the
column `ORDER` (see [data frames](Data_frames.qmd)).

Alternatively, you could use `xtabs()` to achieve the same result --
perhaps with a slightly more intuitive syntax.

```{r}
order_freq2 <- xtabs(~ ORDER, cl.order)

print(order_freq2)
```

### Two or more variables

If we are interested in the relationship between **multiple categorical
variables**, we can cross-tabulate the frequencies of their categories.
For example, what is the distribution of clause order depending on the
type of subordinate clause? The output is also referred to as a
**contingency table**.

```{r}
order_counts1 <- table(cl.order$ORDER, cl.order$SUBORDTYPE)

print(order_counts1)
```

Here is the `xtabs()` alternative:

```{r}
order_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)

print(order_counts2)
```

::: {.callout-note collapse="true" title="How do I obtain percentage tables?"}
There are two ways to convert the raw frequency counts to percentage
tables:

1.  Manually divide all cells by the total number of observations (which
    correspond to the sum of all cells) and multiply the result by 100.

```{r, output = FALSE}
pct1 <- order_counts1/sum(order_counts1) * 100
```

2.  Use the `prop.table()` function and multiply the result by 100.

```{r, output = FALSE}
pct2 <- prop.table(order_counts1) * 100
```
:::

## Plotting categorical data

This section demonstrates both the in-built plotting functions of R
('Base R') as well as the more modern versions provided by the
`tidyverse` package.

### Moscaiplot

A straightforward way to visualise a contingency table is the
mosaicplot:

```{r}
mosaicplot(order_counts2, color = TRUE)
```

### Barplots

The workhorse of categorical data analysis is the barplot. Base R
functions usually require a `table` object as input, whereas `ggplot2`
can operate on the raw dataset.

### One variable

::: panel-tabset
### Base R

-   Base R barplot with `barplot()`; requires the counts as computed by
    `tables()` or `xtabs()`

```{r}
order_freq1 <- table(cl.order$ORDER)

barplot(order_freq1)

```

### ggplot2

-   Barplot with `geom_bar()` using the raw input data

```{r, echo = TRUE, output = TRUE}
library(tidyverse)

ggplot(cl.order, aes(x = ORDER)) +
  geom_bar()

```
:::

### Two variables

-   Barplots with the `fill` argument

::: panel-tabset
### Base R

```{r}
order_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)

barplot(order_counts2, 
        beside = TRUE,  # Make bars side-by-side
        legend = TRUE)  # Add a legend
```

### Base R (fully customised)

```{r}
order_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)

barplot(order_counts2, 
        beside = TRUE,  # Make bars dodged (i.e., side by side)
        main = "Distribution of ORDER by SUBORDTYPE (Base R)", 
        xlab = "ORDER", 
        ylab = "Frequency", 
        col = c("lightblue", "lightgreen"), # Customize colors
        legend = TRUE,  # Add a legend
        args.legend = list(title = "SUBORDTYPE", x = "topright"))
```

### ggplot2

```{r, echo = TRUE, output = TRUE}
library(tidyverse)

ggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +
  geom_bar(position = "dodge")
```

### ggplot2 (fully customised)

```{r, echo = TRUE, output = TRUE}
library(tidyverse)

ggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +
  geom_bar(position = "dodge") +
  labs(
    title = "Clause order by subordinate clause type",
    x = "Clause order",
    y = "Frequency",
    fill = "Type of subordinate clause"
  ) +
  theme_bw()
```
:::

## Plotting percentages

::: {.callout-note collapse="true" title="How do I plot percentages in Base R?"}
In very much the same way as with the raw counts:

```{r}
barplot(pct1, 
        beside = TRUE,  # Make bars side-by-side
        legend = TRUE)  # Add a legend
```
:::

::: {.callout-note collapse="true" title="How do I plot percentages with `ggplot2`?"}
Here, a few tweaks are necessary. In general, the `ggplot()` function
prefers to works with data frames rather than cross-tables, so we'll
have to coerce it into one first:

```{r}
pct1_df <- as.data.frame(pct1)

print(pct1_df)
```

Now we can plot the percentages with `geom_col()`. This geom (=
'geometric object') allows us to manually specify what should be mapped
onto the y-axis:

```{r}
library(tidyverse)

ggplot(pct1_df, aes(x = Var1, y = Freq, fill = Var2)) +
  geom_col(position = "dodge")

```
:::

## Exporting tables to MS Word

The `flextable` package greatly facilitates generating publication-ready
tables in R. It provides the best output if used on a table created by
`xtabs()`. The full guide to this package can be found
[here](https://ardata-fr.github.io/flextable-book/crosstabs.html#using-tables).

```{r, output = FALSE}
# Load library after installation
library(flextable)

# Create a table
tab1 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)

# Convert a table to a flextable with as_flextable()
output_1 <- as_flextable(tab1)

# Print output
print(output_1)
```

![](crosstable_plot1.png)

Unfortunately, the output cannot really be customised. However, if you'd
like to add some further options, the `crosstable` package provides a
remedy. In fact, it is even easier to use as it doesn't require you to
compute any tables beforehand.

```{r}
# Required libraries
library(crosstable)
library(flextable)

# Create the cross table
output2 <- crosstable(cl.order, ORDER, by = SUBORDTYPE, 
                 total = "both",
                 percent_digits = 2)

as_flextable(output2)

```
