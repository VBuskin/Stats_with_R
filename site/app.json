[{"name":"app.R","content":"library(shiny)\nlibrary(quanteda)\nlibrary(quanteda.textstats)\nlibrary(DT)\nlibrary(openxlsx)\nlibrary(tidyverse)\nlibrary(ggplot2) # Ensure ggplot2 is loaded\n\n# Load corpus\nICE_GB <- readRDS(\"../ICE_GB.RDS\")\n\n# Define UI for application\nui <- fluidPage(\n  titlePanel(\"Quanteda Corpus Query\"),\n  sidebarLayout(\n    sidebarPanel(\n      textInput(\"query\", \"Enter your query:\", value = \"\"),\n      sliderInput(\"window\", \"Select window size:\", min = 1, max = 50, value = 10),\n      checkboxInput(\"caseSensitive\", \"Case Sensitive\", value = FALSE),\n      downloadButton(\"downloadCsv\", \"Download CSV (Tab-delimited)\"),\n      downloadButton(\"downloadXlsx\", \"Download XLSX\"),\n      downloadButton(\"downloadRds\", \"Download RDS\")\n    ),\n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Query Results\", DTOutput(\"queryResult\")),\n        tabPanel(\"Keyword Statistics\", DTOutput(\"keywordStats\")),\n        tabPanel(\"Keyword Plot\", plotOutput(\"keywordPlot\")) # New panel for the plot\n      )\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output) {\n  query_result <- reactive({\n    query <- input$query\n    window_size <- input$window\n    case_sensitive <- input$caseSensitive\n    if (query != \"\") {\n      # Tokenize and query the corpus\n      corpus <- ICE_GB\n      result <- kwic(corpus, pattern = query, valuetype = \"regex\", window = window_size, case_insensitive = !case_sensitive) \n      # Execute these functions right before exporting the results.\n       # mutate(docname = str_replace_all(docname, \".*/([A-Z][0-9][A-Z]-[0-9]{1,3}).txt\", \"\\\\1\")) \n      # Separate text categories from file numbers\n      #result <- separate_wider_delim(result, cols = docname, delim = \"-\", names = c(\"Text_category\", \"File_number\"))\n      if (nrow(result) > 0) {\n        result\n      } else {\n        data.frame(Message = \"No matches found.\")\n      }\n    }\n  })\n  \n  # Compute keyword statistics\n  keyword_stats <- reactive({\n    result <- query_result()\n    if (nrow(result) > 0 && !(\"Message\" %in% names(result))) {\n      keyword_freq <- result %>%\n        as_tibble() %>% # fixed calculation problem\n        count(keyword) %>%\n        mutate(Percentage = (n / sum(n)) * 100)\n      return(keyword_freq)\n    } else {\n      return(data.frame(Keyword = character(), Count = integer(), Percentage = numeric()))\n    }\n  })\n  \n  # Render data table for query results\n  output$queryResult <- renderDT({\n    datatable(query_result(), \n              options = list(pageLength = 10, \n                             scrollX = TRUE, \n                             autoWidth = TRUE))\n  })\n  \n  # Render data table for keyword statistics\n  output$keywordStats <- renderDT({\n    datatable(keyword_stats(), \n              options = list(pageLength = 10, \n                             scrollX = TRUE, \n                             autoWidth = TRUE))\n  })\n  \n  # Render plot for keyword statistics\n  output$keywordPlot <- renderPlot({\n    keyword_freq <- keyword_stats()\n    if (nrow(keyword_freq) > 0) {\n      ggplot(keyword_freq, aes(x = keyword, y = Percentage)) + \n        geom_point(color = \"steelblue\") +\n        labs(x = \"Keyword\", y = \"Percentage\", title = \"Keyword Frequency Plot\") +\n        coord_flip() +\n        theme_light() +\n        theme(axis.text.x = element_text(angle = 45, hjust = 1))\n    }\n  })\n  \n  # Download handlers for results\n  output$downloadCsv <- downloadHandler(\n    filename = function() {\n      paste(\"query_results_\", Sys.Date(), \".csv\", sep = \"\")\n    },\n    content = function(file) {\n      write.table(query_result(), file, sep = \"\\t\", row.names = FALSE)\n    }\n  )\n  \n  output$downloadXlsx <- downloadHandler(\n    filename = function() {\n      paste(\"query_results_\", Sys.Date(), \".xlsx\", sep = \"\")\n    },\n    content = function(file) {\n      write.xlsx(query_result(), file, rowNames = FALSE)\n    }\n  )\n  \n  output$downloadRds <- downloadHandler(\n    filename = function() {\n      paste(\"query_results_\", Sys.Date(), \".rds\", sep = \"\")\n    },\n    content = function(file) {\n      saveRDS(query_result(), file)\n    }\n  )\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)\n","type":"text"}]
