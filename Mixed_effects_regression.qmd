---
title: "Mixed-effects regression"
author: Vladimir Buskin
format:
  html:
    self-contained: false
    logo: logo.png
    footer: "Regression"
    theme: Reference
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 4
    scrollable: true
editor: visual
bibliography: R.bib
---

## Recommended reading

Specifically for linguists:

> @paquot_mixed-effects_2020

General:

> @gelmanDataAnalysisUsing2007

## Preparation

```{r}
# Load libraries
library(lme4)
library(tidyverse)
library(broom)
library(ggeffects)

# Load data
varmorph <- read.csv("varmorph_data.csv", header = TRUE)

# Reduce data
varmorph2 <- varmorph %>% select(rt, target, prime_type, subj_id)
```

## Multilevel models

At their core, mixed-effects models "are extensions of regression in
which data are structured in groups and coefficients can vary by group"
[@gelmanDataAnalysisUsing2007: 237]. Typical grouping structures found
in linguistic data include speakers, regions, or lexical stimuli for
which **multiple observations** are attested. Normally, such structures
would violate the assumption of independence, but can be controlled for
by capturing group-wise tendencies.

Here is a schematic representation of a hierarchically structured
dataset:

```{mermaid}
%%| fig-width: 8
%%| fig-height: 8
graph LR
    A1[Participant 1] --> B11(Item 1) --> C11(Reaction time 1)
    A1[Participant 1] --> B12(Item 2) --> C12(Reaction time 2)
    A1[Participant 1] --> B13(Item ...) --> C13(Reaction time ...)

    A2[Participant 2] --> B21(Item 1) --> C21(Reaction time 1)
    A2[Participant 2] --> B22(Item 2) --> C22(Reaction time 2)
    A2[Participant 2] --> B23(Item ...) --> C23(Reaction time ...)
  
    A3[Participant ...] --> B31(Item 1) --> C31(Reaction time 1)
    A3[Participant ...] --> B32(Item 2) --> C32(Reaction time 2)
    A3[Participant ...] --> B33(Item ...) --> C33(Reaction time ...)
  
```

### Types of mixed-effects models

Variance across groups can be captured by **varying-intercept** and/or
**varying-slope** models. These varying coefficients also known as
**random effects** (cf. @gelmanDataAnalysisUsing2007:
245).[^mixed_effects_regression-1] In the model equation, the intercept
and/or the slope is additionally indexed for the grouping factor. Let
$J$ denote the number of groups for $j = 1, ..., J$.

[^mixed_effects_regression-1]: Random effects are assumed to behave like
    random variables and follow a normal distribution

::: callout-note
## Varying-intercept model

We allow group-wise variation in the intercept by replacing $\beta_0$
with $\beta_{0j}$ to indicate the intercept for the $j$-th group.

$$
Y = \beta_{0j} + \beta_1X_{1} + \beta_2X_{2} + ... + \epsilon
$$
:::

::: callout-note
## Varying-slope model

We will allow group-wise variation in the slope coefficients by
replacing them with $\beta_{ij}$ to indicate the slope for the $j$-th
group.\
$$Y = \beta_{0} + \beta_{1j}X_{1} + \beta_{2j}X_{2} + ... + \epsilon $$
:::

### Crossed and nested effects

Another distinction often made in multilevel data with more than one
random effect is between **nested** and **crossed** effects. This is
dictated by the design of the study. In the priming data.

### Linear mixed-effects models

### Application in R

```{r}

# Varying intercept model

# Define reference level for "prime_type"
varmorph2$prime_type <- factor(varmorph2$prime_type, levels = c("unrelated", "derived", "inflected", "fillter"))

# Fit mixed-effects models
varmorph.me <- lmer(rt ~ prime_type + # fixed effect
                      (1 | subj_id) + # let intercept vary by subject
                      (1 | target), # # let intercept vary by target word
                    data = varmorph2)

# Summarise results
summary(varmorph.me)


# Varying-slope model
varmorph.me2 <- lmer(rt ~ prime_type +
                      (1 + prime_type | subj_id),
                     data = varmorph2)

summary(varmorph.me2)


str(ranef(varmorph.me))

str(ranef(varmorph.me2))

```

## Visualising mixed-effects models

```{r, eval = F, include = F}
# For random effects of subject
plot(ggpredict(varmorph.me, terms = c("subj_id"), type = "re")) 
plot(ggpredict(varmorph.me, terms = c("target"), type = "re")) + geom_smooth()

# Or more simply
sjPlot::plot_model(varmorph.me, type="pred", terms=c("subj_id"), pred.type="re", ci.lvl=NA)


## Varying intercept

### Using ggeffects

# Step 1: Generate predictions for the random effects of 'subj_id'
pred_subj <- ggpredict(varmorph.me, terms = "subj_id", type = "re", interval = "confidence", ci.level = 0.95)

# Step 2: Plot the caterpillar plot
ggplot(pred_subj, aes(x = x, y = predicted)) +
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +
  coord_flip() +  # Flip coordinates to get the classic caterpillar shape
  labs(title = "Caterpillar Plot: Random Intercepts by Subject",
       x = "Subject ID",
       y = "Predicted Random Intercept") +
  theme_minimal()

### Using base R

## Version 1

# Step 1: Extract random effects for both 'subj_id' and 'target'
ranef_data <- ranef(varmorph.me)

# Step 2: Prepare data frames for both 'subj_id' and 'target' intercepts
subj_intercepts <- data.frame(
  subj_id = rownames(ranef_data$subj_id),
  intercept = ranef_data$subj_id[,"(Intercept)"]
)

target_intercepts <- data.frame(
  target = rownames(ranef_data$target),
  intercept = ranef_data$target[,"(Intercept)"]
)

# Step 3: Plot the varying intercepts for 'subj_id'
p1 <- ggplot(subj_intercepts, aes(x = reorder(subj_id, intercept), y = intercept)) +
  geom_point() +
  coord_flip() +  # Flip coordinates for better readability
  labs(title = "Varying Intercepts by Subject",
       x = "Subject ID",
       y = "Intercept") +
  theme_minimal()

# Step 4: Plot the varying intercepts for 'target'
p2 <- ggplot(target_intercepts, aes(x = reorder(target, intercept), y = intercept)) +
  geom_point() +
  coord_flip() +
  labs(title = "Varying Intercepts by Target Word",
       x = "Target Word",
       y = "Intercept") +
  theme_minimal()

# Step 5: Display both plots
p1
p2

## Version 2

# Step 1: Extract random effects and their standard errors
ranef_obj <- ranef(varmorph.me, condVar = TRUE)  # Extract random effects with conditional variance
se_ranef <- arm::se.ranef(varmorph.me)           # Extract standard errors for random effects

# Step 2: Prepare a data frame for 'subj_id' random intercepts with confidence intervals
subj_ranef <- ranef_obj$subj_id  # Random effects for subjects
subj_se <- se_ranef$subj_id      # Standard errors for subjects

# Combine random effects and standard errors into a data frame
subj_df <- data.frame(
  subj_id = rownames(subj_ranef),
  intercept = subj_ranef[, "(Intercept)"],
  se = subj_se[, "(Intercept)"],
  conf.low = subj_ranef[, "(Intercept)"] - 1.96 * subj_se[, "(Intercept)"],
  conf.high = subj_ranef[, "(Intercept)"] + 1.96 * subj_se[, "(Intercept)"]
)

# Step 3: Create the caterpillar plot
ggplot(subj_df, aes(x = reorder(subj_id, intercept), y = intercept)) +
  geom_pointrange(aes(ymin = conf.low, ymax = conf.high)) +
  coord_flip() +  # Flip coordinates to get the classic caterpillar shape
  labs(title = "Caterpillar Plot: Random Intercepts by Subject",
       x = "Subject ID",
       y = "Random Intercept") +
  theme_minimal()

## Varying slope

# Step 1: Generate predictions for each subject and prime_type
pred <- ggpredict(varmorph.me2, terms = c("prime_type", "subj_id"), type = "re")

# Step 2: Plot regression lines for each subject
ggplot(pred, aes(x = x, y = predicted)) +
  geom_line(aes(group = group), size = 1) +  # 'group' here refers to 'subj_id'
  facet_wrap(~ group) +     # This will give you one plot per subject
  labs(title = "Random Slopes for Prime Type by Subject",
       x = "Prime Type",
       y = "Predicted Reaction Time (rt)",
       color = "Subject ID") +
  theme_minimal()


## Using ranef()

# Step 1: Extract random effects
ranef_data <- ranef(varmorph.me2)$subj_id

# Step 2: Extract fixed effects
fixed_effects <- fixef(varmorph.me2)

# Step 3: Create a data frame of the prime types
prime_types <- c("filler", "inflected", "unrelated")

# Step 4: Prepare a data frame for plotting
# Add random effects to fixed effects to calculate the predicted values
ranef_df <- data.frame(
  subj_id = rownames(ranef_data),
  intercept = ranef_data[,"(Intercept)"],
  filler = fixed_effects["prime_typefiller"] + ranef_data[,"prime_typefiller"],
  inflected = fixed_effects["prime_typeinflected"] + ranef_data[,"prime_typeinflected"],
  unrelated = fixed_effects["prime_typeunrelated"] + ranef_data[,"prime_typeunrelated"]
)

# Reshape the data to long format for plotting with ggplot
ranef_long <- ranef_df %>%
  pivot_longer(cols = filler:unrelated, names_to = "prime_type", values_to = "slope")

# Step 5: Plot the regression lines
ggplot(ranef_long, aes(x = prime_type, y = slope, group = subj_id, color = subj_id)) +
  geom_line(size = 1) +  # Line for each subject
  labs(title = "Random Slopes for Prime Type by Subject",
       x = "Prime Type",
       y = "Predicted Effect",
       color = "Subject ID") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 1))

```
