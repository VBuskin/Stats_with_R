{
  "hash": "ac6a9717f871c0456212c1890008f6e2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types\"\nauthor:\n  name: \"Vladimir Buskin\" \n  orcid: \"0009-0005-5824-1012\"\n  affiliation: \n    name: \"Catholic University of Eichstätt-Ingolstadt\"\n    department: \"English Language and Linguistics\"\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Recommended reading\n\n> @heumann_introduction_2022: Chapter 1\n>\n> @baguleySeriousStatsGuide2012: Chapter 1\n>\n> @agrestiFoundationsStatisticsData2022: Chapter 1.2\n\n## Preparation\n\n\n\n\n\nPlease download the file `Paquot_Larsson_2020_data.xlsx`\n[@paquotDescriptiveStatisticsVisualization2020][^variables-1] and store\nit in your working directory.\n\n[^variables-1]: The supplementary materials can be downloaded from the\n    publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\]. Note that the dataset has been\n    originally compiled by @gries_statistics_2013.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load libraries\nlibrary(readxl)\nlibrary(tidyverse)\n\n# Load data\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n\n# Inspect data\nstr(cl.order)\nhead(cl.order)\n```\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"What's in the file? The `str()` function\"}\nThe easiest way to get a general overview of the full data set is to\napply the `str()` function to the respective data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [403 × 8] (S3: tbl_df/tbl/data.frame)\n $ CASE       : num [1:403] 4777 1698 953 1681 4055 ...\n $ ORDER      : chr [1:403] \"sc-mc\" \"mc-sc\" \"sc-mc\" \"mc-sc\" ...\n $ SUBORDTYPE : chr [1:403] \"temp\" \"temp\" \"temp\" \"temp\" ...\n $ LEN_MC     : num [1:403] 4 7 12 6 9 9 9 4 6 4 ...\n $ LEN_SC     : num [1:403] 10 6 7 15 5 5 12 2 24 11 ...\n $ LENGTH_DIFF: num [1:403] -6 1 5 -9 4 4 -3 2 -18 -7 ...\n $ CONJ       : chr [1:403] \"als/when\" \"als/when\" \"als/when\" \"als/when\" ...\n $ MORETHAN2CL: chr [1:403] \"no\" \"no\" \"yes\" \"no\" ...\n```\n\n\n:::\n:::\n\n\nThis shows us that the data frame has 8 columns, as the `$` operators\nindicate (`$ Case`, `$ ORDER`, ...). The column names are followed by\n\n-   the data type (`num` for numeric and `chr` for character strings)\n\n-   the number of values (`` `[1:403]` ``) and\n\n-   the first few observations.\n\nAnother intuitive way to display the structure of a data matrix is to\nsimply show the first few rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Further details on the variables\"}\n-   `ORDER`: Does the subordinate clause come before or after the main\n    clause? ('sc-mc' vs. 'mc-sc')\n\n-   `SUBORDTYPE`: Is the subordinate clause temporal or causal? ('temp'\n    vs. 'caus')\n\n-   `MORETHAN2CL`: Are there most clauses in the sentence than just one\n    subordinate clause and one main clause? ('yes' vs. 'no')\n\n-   `LEN_MC`: How many words does the main clause contain? (ratio-scaled\n    continuous variable)\n\n-   `LEN_SC`: How many words does the subordinate clause contain?\n    (ratio-scaled continuous variable)\n\n-   `LENGTH_DIFF`: What is the length difference in words between the\n    main clause and subordinate clause? (ratio-scaled continuous\n    variables)\n:::\n\n## The big picture: Populations and samples\n\nIn order to investigate one or more (extra-)linguistic features, we\nfirst need to collect relevant **observations**, which typically\ncorrespond to linguistic utterances in a corpus-linguistic context.\nSince it is not feasible to examine the entirety of all linguistic\nutterances ever produced, i.e., the **population**, we rely on specific\nsubsets of it: **samples**.\n\nTo state this more formally, let $\\omega$ ('lower-case Omega') denote a\nsingle observation of interest. The full set of theoretically possible\nobservations is contained in $\\Omega$ ('upper-case Omega'), with\n$\\Omega = \\{\\omega_1, \\omega_2, \\dots, \\omega_n \\}$. Here $n$ represents\nthe $n$-th observation and should be a natural number. A sample is then\nsimply a selection of elements from $\\Omega$.\n\n## Variables\n\nThe concept of the **variable** is very handy in that it allows us to\nquantify different aspects our linguistic observations, such the age or\ngender of the speaker, the register of the speech situation, the variety\nof English, the length of an utterance, a syntactic construction or a\ngrammatical category, among many other theoretically possible features.\nFor each observation, we should be able to assign a specific **value**\nto our variables; for instance, a variable `Register` could assume a\nvalue such as `informal`, or `Utterance length` a hypothetical value of\n`5` (e.g., 5 words).\n\nIn the statistical literature, variables are usually represented by\nupper-case letters, such as $X$. For each observation\n$\\omega \\in \\Omega$, $X$ has a specific outcome $x$. The set $S$\ncomprises all possible outcomes of $X$, e.g.,\n\n-   $S_{\\text{Register}} = \\{\\text{informal}, \\text{formal}, ...\\}$,\n\n-   $S_{\\text{Utterance length}} = \\{1, 2, 3, \\dots \\}$,\n\n-   ...\n\n::: callout-note\n## Number of (unique) values in R\n\nTo count the number of items in a vector, which correspond to the total\nnumber $n$ of attested values of $X$, we can use `length()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(cl.order$SUBORDTYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 403\n```\n\n\n:::\n:::\n\n\nIn fact, it is equivalent to the number of rows in the full data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 403\n```\n\n\n:::\n:::\n\n\nThe function `unique()` shows all unique items (= types) in a vector,\nwhich reflect the possible outcomes in $S$:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(cl.order$SUBORDTYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"temp\" \"caus\"\n```\n\n\n:::\n:::\n\n:::\n\nInformation on variables and their values is conventionally arranged in\na **data set**, which is essentially a matrix with columns (= variables)\nand rows (= observations). Assuming that $n$ denotes the row number and\n$p$ the column number, the general form of a dataset is summarised in\n@eq-dataset.\n\n$$\n\\begin{pmatrix}\n    \\omega & X_1 & X_2 & \\cdots &  X_p \\\\\n    1 & x_{11} & x_{12} & \\cdots & x_{1p} \\\\\n    2 & x_{21} & x_{22} & \\cdots & x_{2p} \\\\\n    \\vdots & \\vdots & \\vdots &  & \\vdots \\\\\n    n & x_{n1} & x_{n2} & \\cdots & x_{np}\n\\end{pmatrix}\n$$ {#eq-dataset}\n\n### Subtypes\n\nIn general, we distinguish between **discrete** variables, which can\nonly take a limited set of unique values, and **continuous** variables,\nwhich can take infinitely many values within a specified range.\n\nWe can further subdivide discrete and continuous variables into into\nnominal, ordinal, interval-scaled and ratio-scaled ones:\n\n::: {.callout-note title=\"Nominal/categorical\" collapse=\"true\"}\nThese variables comprise a limited number of categories which **cannot\nbe ordered** in a meaningful way. For instance, it does not matter which\nvalue of `SUBORDTYPE` or `MORETHAN2CL` comes first or last:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    unique(cl.order$SUBORDTYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"temp\" \"caus\"\n```\n\n\n:::\n\n```{.r .cell-code}\n    unique(cl.order$MORETHAN2CL)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"no\"  \"yes\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note title=\"Ordinal/categorical\" collapse=\"true\"}\nOrdinal variables are **ordered**. However, the intervals between their\nindividual values are not interpretable. Heumann\n[-@heumann_introduction_2022: 6] provides a pertinent example:\n\n> \\[T\\]he satisfaction with a product (unsatisfied–satisfied–very\n> satisfied) is an ordinal variable because the values this variable can\n> take can be ordered but the differences between\n> 'unsatisfied–satisfied' and 'satisfied–very satisfied' cannot be\n> compared in a numerical way.\n:::\n\n::: {.callout-note title=\"Interval-scaled/continuous\" collapse=\"true\"}\n-   In the case of **interval**-scaled variables, the differences\n    between the values can be interpreted, but their ratios must be\n    treated with caution. A temperature of 4°C is 6 degrees warmer than\n    -2°C; however, this does not imply that 4°C is three times warmer\n    than -2°C. This is because the temperature scale has no true zero\n    point; 0°C simply signifies another point on the scale and not the\n    absence of temperature altogether.\n:::\n\n::: {.callout-note title=\"Ratio-scaled/continuous\" collapse=\"true\"}\n-   **Ratio**-scaled variables allow both a meaningful interpretation of\n    the differences between their values and (!) of the ratios between\n    them. Within the context of clause length, `LENGTH_DIFF` values such\n    as 4 and 8 not only suggest that the latter is four units greater\n    than the former but also that their ratio $\\frac{8}{4} = 2$ is a\n    valid way to describe the relationship between these values. Here a\n    `LENGTH_DIFF` of 0 can be clearly viewed as the absence of a length\n    difference.\n:::\n\n### Dependent vs. independent variables\n\nIn empirical studies, it is often of interest whether one variable leads\nto changes in the values of another variable. When exploring such\n**associations** (or **correlations**), we need to take another\nheuristic step to clarify the direction of the influence.\n\nIn a linguistic context, we denote the variable whose usage patterns\nwe'd like to explain as the **dependent** or **response** variable. A\nlist of possible dependent variables is provided in the section on\n[Linguistic variables](Linguistic_variables.qmd)).\n\nIts outcomes are said to depend on one or more **independent\nvariables**. These are also often referred to as **explanatory**\nvariables as they are supposed to explain variation in the response\nvariable. These can be `AGE`, `SEX` or the `VARIETY` of English at hand.\n\n### Exercises\n\n::: {#exr-var-1}\nIdentify the variable types (nominal, ordinal etc.) for all columns in\nthe `cl.order` dataset.\n:::\n\n::: {#exr-var-2}\nConsider the general form of the data matrix from @eq-dataset.\n\n1.  What would the labels $\\omega$, $X$ and $x$ correspond to in the\n    `cl.order` dataset?\n\n2.  What would be $\\Omega$ and $S$?\n:::\n\n::: {#exr-var-3}\nConsider the following statement:\n\n> This paper examines the influence of clause length on the ordering of\n> main and subordinate clauses.\n\n1.  What is the dependent variable?\n\n2.  What is/are the independent variable(s)?\n\n3.  What would it mean if they were reversed?\n:::\n",
    "supporting": [
      "Variables_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}