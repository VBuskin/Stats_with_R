{
  "hash": "bb8ef9300a769f0e4e35ed4d26a8ceea",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Statistical variables\"\nauthor: Vladimir Buskin\ninstitute: Catholic University of Eichstätt-Ingolstadt\nformat:\n  html:\n    self-contained: false\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Recommended reading\n\n> @heumann_introduction_2022: Chapter 1.2\n>\n> @agrestiFoundationsStatisticsData2022: Chapter 1.2\n\n## Preparation\n\n\n\n\n\nPlease download the file `Paquot_Larsson_2020_data.xlsx`\n[@paquotDescriptiveStatisticsVisualization2020][^variables-1] and store\nit in your working directory.\n\n[^variables-1]: The supplementary materials can be downloaded from the\n    publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\]. Note that the dataset has been\n    originally compiled by @gries_statistics_2013.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\n\n# Load data\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n\n# Inspect data\nstr(cl.order)\nhead(cl.order)\n```\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"What's in the file? The `str()` function\"}\nThe easiest way to get a general overview of the full data set is to\napply the `str()` function to the respective data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [403 × 8] (S3: tbl_df/tbl/data.frame)\n $ CASE       : num [1:403] 4777 1698 953 1681 4055 ...\n $ ORDER      : chr [1:403] \"sc-mc\" \"mc-sc\" \"sc-mc\" \"mc-sc\" ...\n $ SUBORDTYPE : chr [1:403] \"temp\" \"temp\" \"temp\" \"temp\" ...\n $ LEN_MC     : num [1:403] 4 7 12 6 9 9 9 4 6 4 ...\n $ LEN_SC     : num [1:403] 10 6 7 15 5 5 12 2 24 11 ...\n $ LENGTH_DIFF: num [1:403] -6 1 5 -9 4 4 -3 2 -18 -7 ...\n $ CONJ       : chr [1:403] \"als/when\" \"als/when\" \"als/when\" \"als/when\" ...\n $ MORETHAN2CL: chr [1:403] \"no\" \"no\" \"yes\" \"no\" ...\n```\n\n\n:::\n:::\n\n\nThis shows us that the data frame has 8 columns, as the `$` operators\nindicate (`$ Case`, `$ ORDER`, ...). The column names are followed by\n\n-   the data type (`num` for numeric and `chr` for character strings)\n\n-   the number of values (`` `[1:403]` ``) and\n\n-   the first few observations.\n\nAnother intuitive way to display the structure of a data matrix is to\nsimply show the first few rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Further details on the variables\"}\n-   `ORDER`: Does the subordinate clause come before or after the main\n    clause? ('sc-mc' vs. 'mc-sc')\n\n-   `SUBORDTYPE`: Is the subordinate clause temporal or causal? ('temp'\n    vs. 'caus')\n\n-   `MORETHAN2CL`: Are there most clauses in the sentence than just one\n    subordinate clause and one main clause? ('yes' vs. 'no')\n\n-   `LEN_MC`: How many words does the main clause contain? (ratio-scaled\n    continuous variable)\n\n-   `LEN_SC`: How many words does the subordinate clause contain?\n    (ratio-scaled continuous variable)\n\n-   `LENGTH_DIFF`: What is the length difference in words between the\n    main clause and subordinate clause? (ratio-scaled continuous\n    variables)\n:::\n\n## Variables\n\nThe concept of the **variable** is very handy in that it allows us to\nquantify various aspects their observations. In general, we distinguish\nbetween **discrete** variables, which can only take a limited set of\nunique values, and **continuous** variables, which can take infinitely\nmany values within a specified range.\n\n### Subtypes\n\nWe can further subdivide discrete and continuous variables into into\nnominal, ordinal, interval-scaled and ratio-scaled ones:\n\n::: {.callout-note title=\"Nominal/categorical\" collapse=\"true\"}\nThese variables comprise a limited number of categories which **cannot\nbe ordered** in a meaningful way. For instance, it does not matter which\nvalue of `SUBORDTYPE` or `MORETHAN2CL` comes first or last:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n    unique(cl.order$SUBORDTYPE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"temp\" \"caus\"\n```\n\n\n:::\n\n```{.r .cell-code}\n    unique(cl.order$MORETHAN2CL)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"no\"  \"yes\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note title=\"Ordinal/categorical\" collapse=\"true\"}\nOrdinal variables are **ordered**. However, the intervals between their\nindividual values are not interpretable. Heumann\n[-@heumann_introduction_2022: 6] provides a pertinent example:\n\n> \\[T\\]he satisfaction with a product (unsatisfied–satisfied–very\n> satisfied) is an ordinal variable because the values this variable can\n> take can be ordered but the differences between\n> 'unsatisfied–satisfied' and 'satisfied–very satisfied' cannot be\n> compared in a numerical way.\n:::\n\n::: {.callout-note title=\"Interval-scaled/continuous\" collapse=\"true\"}\n-   In the case of **interval**-scaled variables, the differences\n    between the values can be interpreted, but their ratios must be\n    treated with caution. A temperature of 4°C is 6 degrees warmer than\n    -2°C; however, this does not imply that 4°C is three times warmer\n    than -2°C. This is because the temperature scale has no true zero\n    point; 0°C simply signifies another point on the scale and not the\n    absence of temperature altogether.\n:::\n\n::: {.callout-note title=\"Ratio-scaled/continuous\" collapse=\"true\"}\n-   **Ratio**-scaled variables allow both a meaningful interpretation of\n    the differences between their values and (!) of the ratios between\n    them. Within the context of clause length, `LENGTH_DIFF` values such\n    as 4 and 8 not only suggest that the latter is four units greater\n    than the former but also that their ratio $\\frac{8}{4} = 2$ is a\n    valid way to describe the relationship between these values. Here a\n    `LENGTH_DIFF` of 0 can be clearly viewed as the absence of a length\n    difference.\n:::\n\n### Dependent vs. independent variables\n\nIn empirical studies, it is often of interest whether one variable leads\nto changes in the values of another variable. When exploring such\n**associations**, we need to take another heuristic step to clarify the\ndirection of the influence.\n\nIn a linguistic context, we denote the variable whose usage patterns\nwe'd like to explain as the **dependent** or **response** variable. A\nlist of possible dependent variables is provided in the section on\n[Linguistic variables](Linguistic_variables.qmd)).\n\nIts outcomes are said to depend on one or more **independent\nvariables**. These are also often referred to as **explanatory**\nvariables as they are supposed to explain variation in the response\nvariable. These can be age, sex or the variety of English at hand.\n\n### Exercises\n\n1.  Classify the remaining variables in the `cl.order` dataset.\n\n2.  Consider the following statement:\n\n> This paper examines the influence of clause length on the ordering of\n> main and subordinate clauses.\n\nWhat is the dependent variable? What is/are the independent variable(s)?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}