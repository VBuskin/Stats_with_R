{
  "hash": "0ddc23a64bf016cd216ae31937c79850",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Understanding and visualising variables\"\nauthor: Vladimir Buskin\ninstitute: Catholic University of Eichstätt-Ingolstadt\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Preparation\n\n\n\n\n\nPlease download the file \"Paquot_Larsson_2020_data.xlsx\"\n    [@paquotDescriptiveStatisticsVisualization2020][^variables-1] and store it in your working directory.\n   \n[^variables-1]: The supplementary materials can be downloaded from the\n    publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(\"nycflights13\")\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\nlibrary(\"ggthemes\")\n\n# Load data\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n\n# Inspect data\nstr(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [403 × 8] (S3: tbl_df/tbl/data.frame)\n $ CASE       : num [1:403] 4777 1698 953 1681 4055 ...\n $ ORDER      : chr [1:403] \"sc-mc\" \"mc-sc\" \"sc-mc\" \"mc-sc\" ...\n $ SUBORDTYPE : chr [1:403] \"temp\" \"temp\" \"temp\" \"temp\" ...\n $ LEN_MC     : num [1:403] 4 7 12 6 9 9 9 4 6 4 ...\n $ LEN_SC     : num [1:403] 10 6 7 15 5 5 12 2 24 11 ...\n $ LENGTH_DIFF: num [1:403] -6 1 5 -9 4 4 -3 2 -18 -7 ...\n $ CONJ       : chr [1:403] \"als/when\" \"als/when\" \"als/when\" \"als/when\" ...\n $ MORETHAN2CL: chr [1:403] \"no\" \"no\" \"yes\" \"no\" ...\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n:::\n\n\n## Types of variables\n\nThe concept of the **variable** allows us to quantify various aspects of\nour observations.\n\n-   **nominal/categorical**: These variables have a limited number of\n    levels which cannot be ordered in a meaningful way. For instance, it\n    does not matter which value of `SUBORDTYPE` or `MORETHAN2CL` comes\n    first or last:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    unique(cl.order$SUBORDTYPE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"temp\" \"caus\"\n    ```\n    \n    \n    :::\n    \n    ```{.r .cell-code}\n    unique(cl.order$MORETHAN2CL)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"no\"  \"yes\"\n    ```\n    \n    \n    :::\n    :::\n\n\n-   **ordinal**: Such variables can be ordered, but the intervals\n    between their individuals values are not meaningful. Heumann\n    [-@heumann_introduction_2022: 6] provides a pertinent example:\n\n    \"\\[T\\]he satisfaction with a product (unsatisfied–satisfied–very\n    satisfied) is an ordinal variable because the values this variable\n    can take can be ordered but the differences between\n    'unsatisfied–satisfied' and 'satisfied–very satisfied' cannot be\n    compared in a numerical way\".\n\n-   In the case of **interval**-scaled variables, the differences\n    between the values can be interpreted, but their ratios must be\n    treated with caution. A temperature of 4°C is 6 degrees warmer than\n    -2°C; however, this does not imply that 4°C is three times warmer\n    than -2°C. This is because the temperature scale has no true zero\n    point; 0°C simply signifies another point on the scale and not the\n    absence of temperature altogether.\n\n-   **Ratio**-scaled variables allow both a meaningful interpretation of\n    the differences between their values and (!) of the ratios between\n    them. Within the context of clause length, `LENGTH_DIFF` values such\n    as 4 and 8 not only suggest that the latter is four units greater\n    than the former but also that their ratio $\\frac{8}{4} = 2$ is a\n    valid way to describe the relationship between these values. Here a\n    `LENGTH_DIFF` of 0 can be clearly viewed as the absence of a length\n    difference.\n\n## Introduction to `ggplot2`\n\n### Building a ggplot\n\n-   A ggplot requires at minimum three elements: (1) **a data\n    frame**, (2) **axis labels**, and (3) **a plotting option** (also\n    known as \"geom\"). We combine them with the `+` sign.\n\n\n::: {.cell warnings='false'}\n\n```{.r .cell-code}\n# Supply data frame\nggplot(data = cl.order,\n      # Supply axis labels\n        mapping = aes(x = LEN_MC, y = LEN_SC)) +\n      # Set plotting option (here: scatterplot)\n        geom_point()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n### Adding layers\n\n-   Visualise a third variable using the `colors` argument as part of\n    the `aes()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cl.order,\n        mapping = aes(x = LEN_MC, \n                      y = LEN_SC,\n                      color = ORDER)) +\n        geom_point()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n-   Adjust further visual parameters as you see fit:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = cl.order,\n  mapping = aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point(aes(color = ORDER, shape = SUBORDTYPE)) + # <1>\n  labs(\n    title = \"Length of main and subordinate clauses\", # <2>\n    subtitle = \"Dimensions for different ordering types\",\n    x = \"Length of main clause\",\n    y = \"Length of subordinate clause\",\n    color = \"ORDER\",\n    shape = \"SUBORDTYPE\"\n  ) +\n  theme_classic() # <3>\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n1.  Map variables to axes, colours and shapes.\n2.  Add a legend with a title, subtitle and axis labels.\n3.  Change the overall theme of the plot.\n\n## Visualising distributions\n\n### A categorical variable\n\n-   Barplot with `geom_bar()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = ORDER)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n### A numerical variable\n\n-   Histogram with `geom_histogram()`\n-   Densitiy plot with ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = LEN_MC)) +\n  geom_histogram(binwidth = 1)\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n-   Density plot with `geom_density()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = LEN_MC)) +\n  geom_density(linewidth = 0.5)\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### A numerical and categorical variable\n\n-   Boxplot with `geom_boxplot()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n-   Densitiy plot using the optional arguments `color` and/or `fill`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = LEN_MC, fill = ORDER)) +\n  geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n-   A barplot with `geom_col()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_col(aes(x = ORDER, y = LEN_MC))\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Two categorical variables\n\n-   Barplots with the `fill` argument\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Two numerical variables\n\n-   Scatterplot with `geom_point()` (cf. 1.1.1)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n-   Line plot with `geom_line()`; the example is based on the `flights`\n    data set from the previous session)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnycflights13::flights %>%  \n  group_by(hour = sched_dep_time %/% 100) %>% \n  summarize(prop_cancelled = mean(is.na(dep_time)), n = n()) %>%  \n  filter(hour > 1) -> flights2\n  \n  ggplot(flights2, aes(x = hour, y = prop_cancelled)) +\n  geom_line(color = \"grey50\") + \n  geom_point()\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### Multivariate plots\n\n-   Advanced scatterplot with four variables: `LEN_MC` (x), `LEN_SC`\n    (y), `ORDER` (colour) and `SUBORDTYPE` (shape)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 4 variables\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point(aes(color = ORDER, shape = SUBORDTYPE))\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n-   Facets\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 5 variables\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point(aes(color = ORDER, shape = SUBORDTYPE)) +\n  facet_wrap(~MORETHAN2CL)\n```\n\n::: {.cell-output-display}\n![](Variables_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### Saving your plot\n\n-   Save last plot displayed in the viewer to your working directory:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n          geom_point()\n\nggsave(\"figures/clause_length_plot.png\")\n```\n:::\n\n\n## References\n\n::: {#refs}\n:::\n",
    "supporting": [
      "Variables_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}