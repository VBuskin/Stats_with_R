{
  "hash": "7c1d4fea6a6af257a45f07e33c3f7782",
  "result": {
    "engine": "knitr",
    "markdown": "# First steps {.unnumbered}\n\nThis collection of handouts provides a hands-on introduction to data\nanalysis and statistical methods in quantitative corpus linguistics with\nR. It requires a working installation of both **R** and **RStudio**.\n\nIt is geared primarily towards students attending the classes **Language\nVariation** (BA) and **Statistics for Linguistics** (MA) as well as\nthose currently working on their **BA/MA/PhD theses** in empirical\nlinguistics.\n\n## Installing R\n\nFirst, we need to download [R](https://ftp.fau.de/cran/). The link will\ntake you to the homepage of the Comprehensive R Archive Network (CRAN)\nwhere you can download the binary distribution. Choose the one that\ncorresponds to your operating system (Windows/MAC/Linux).\n\n::: {.callout-note collapse=\"true\" title=\"Installation instructions for Windows users\"}\n\nClick \"Download R for Windows\" $\\rightarrow$\nSelect \"base\" $\\rightarrow$ Click on \"Download R-4.4.1 for Windows\" (or\nwhatever most recent version is currently displayed).\n\nOpen the set-up file you've just downloaded and simply follow the\ninstructions on screen. It's fine to go with the default options.\n\n[Video tutorial on YouTube](https://www.youtube.com/watch?v=mfGFv-iB724)\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Installation instructions for MacOS users\"}\n\nClick \"Download R for macOS\" $\\rightarrow$ Select the\nlatest release for your OS\n\nOpen the downloaded .pkg file and follow the instructions in the\ninstallation window.\n\n[Video tutorial on YouTube](https://www.youtube.com/watch?v=Icawuhf0Yqo)\n\n:::\n\n## Installing RStudio\n\nYou can now download and install\n[RStudio](https://posit.co/download/rstudio-desktop/). RStudio is a so-called \"Integrated Development Environment\" (IDE), which will provide us with a variety of helpful tools to write and edit code comfortably. If R was a musical instrument, then RStudio would be the recording studio, so-to-speak.\n\n## The RStudio interface\n\nOnce you've opened RStudio, you will see several empty panes similar to\nthis:\n\n![](RStudio.png){fig-align=\"center\"}\n\n### Console\n\nLet's focus on the **console** window on the left. This is where we can\ndirectly communicate with R by entering \"code\". The way this code is\nwritten follows certain arbitrary conventions -- just like natural\nlanguages such as English or German. Here is an example in the R\nprogramming language:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world!\"\n```\n\n\n:::\n:::\n\n\nEntering this command into your console and pressing ENTER will display\nthe sentence \"Hello world!\" in a new line.\n\n\nAs we can see, anything that R should understand as a simple sequence of\nletters or words must be enclosed by quotation marks `\"...\"`. Anything\ninside them will be interpreted as a so-called **string**. Their\ncounterpart are **numbers** or **integers**, as illustrated here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nNaturally, you can use R for more sophisticated computations:\n\n-   $2 + (3 \\times 3)$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    2 + (3 * 3)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 11\n    ```\n    \n    \n    :::\n    :::\n\n\n-   $\\sqrt{9}$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sqrt(9)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3\n    ```\n    \n    \n    :::\n    :::\n\n\n-   $\\frac{16}{2^3}$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    16 / 2 ^ 3\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2\n    ```\n    \n    \n    :::\n    :::\n\n\n### Environment/Workspace\n\nWhile it is certainly useful to print text or numbers to your console,\nit may sometimes make more sense to (at least temporally) store them\nsomewhere, so you can re-use them later when you need them. In fact, R\ngives us a way of storing data in virtual, container-like objects:\n**variables**. We can assign strings or numbers to a variable by using\nthe assignment operator `<-`.\n\nWhen you run the commands below, you will (hopefully) notice two items\npopping up in your **Environment** tab in the top right corner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreeting <- \"Hello world!\"\n\nquick_math <- 2 + 2 - 1\n```\n:::\n\n\nIf we now want to display the content in the console, we can simply\napply the `print()` function to the variable itself:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(greeting)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world!\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(quick_math)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nWe can also embed variables in other statements. For example, let's take\nthe content of `quick_math` and multiply it with 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhard_math <- quick_math * 2\n\nprint(hard_math)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n### R Scripts\n\nWorking with the console has a very plain, yet important disadvantage:\nOnce we close RStudio, the console is wiped clean, erasing everything\nwe've typed into it during our precious R session.\n\nThe remedy for this nuisance are **scripts**. Essentially, a script is\nthe programmer's equivalent of a Word document: It allows you to save\nall the code you've written to a file, which you can seamlessly continue\nworking on the next time you open it.\n\nTo **create a new R script** you can either go to:\n\n-   \"File\" $\\rightarrow$ \"New\" $\\rightarrow$ \"R Script\" or ...\n\n-   click on the icon with the + sign and select \"R Script\" ...\n\n-   or simply press Ctrl+Shift+N (MacOS: Cmd+Shift+N)\n\nDon't forget to save your script with Ctrl+S (Cmd+S)! It is good\npractice to save your files regularly.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}