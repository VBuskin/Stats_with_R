{
  "hash": "4d8cc0774fb15b75097d16cc0c1ff13d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Import/export data\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n::: callout-tip\n## Script\n\nYou can find the full R script associated with this unit\n[here](https://osf.io/puyrf).\n:::\n\n\n## Recommended reading\n\n> @winter_statistics_2020: Chapter 1.11\n\n## Preparation\n\nThe first section of an R-script always specifies the libraries that are\nneeded for executing the code to follow. In this unit, we will need\n`readxl` and `writexl` to aid us with importing MS Excel files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\nlibrary(writexl)\n```\n:::\n\n\nSimply copy the code lines above into your script and execute them.\n\n### Exporting data\n\nAssume we'd like to save our data frame with word frequencies to a local\nfolder on our system. Let's briefly regenerate it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate data frame\ndata <- data.frame(lemma = c(\"start\", \"enjoy\", \"begin\", \"help\"), \n                   frequency = c(418, 139, 337, 281))\n\n# Print contents\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  lemma frequency\n1 start       418\n2 enjoy       139\n3 begin       337\n4  help       281\n```\n\n\n:::\n:::\n\n\nThere are two common formats in which tabular data can be stored on your\ncomputer:\n\n-   in .**csv**-files ('**c**omma-**s**eparated **v**alues'; native\n    format of LibreOffice Calc)\n\n-   .**xls**/.**xlsx-files** (Microsoft Excel files)\n\n::: {.callout-note collapse=\"true\" title=\"Export to CSV\"}\nTo save our `data` data frame in .csv-format, we can use the\n`write_table()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(data, \"frequency_data.csv\")\n```\n:::\n\n\nThe file is now stored at the location of your current R-script. You can\nopen this file ...\n\n-   in **LibreOffice**\n\n-   in **Microsoft Excel** via `File` \\> `Import` \\> `CSV file` \\>\n    Select the file \\> `Delimited` and then `Next` \\> `Comma` and `Next`\n    \\> `General` and `Finish`.\n\nClearly, opening CSV files in MS Excel is quite cumbersome, which is why\nit's better to export it as an Excel file directly.\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Export to Excel\"}\nWe use `write_xlsx()` provided by the package `writexl` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_xlsx(data, \"frequency_data.xlsx\")\n```\n:::\n\n\nThe file is now stored at the location of your current R-script. You\nshould be able to open it in MS Excel without any issues.\n:::\n\n### Importing data {#sec-import}\n\nLet's read the two files back into R.\n\n::: {.callout-note collapse=\"true\" title=\"Import from CSV\"}\nTo import the CSV file, we can use the `read.csv()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimported_csv <- read.csv(\"frequency_data.csv\")\nprint(imported_csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  X lemma frequency\n1 1 start       418\n2 2 enjoy       139\n3 3 begin       337\n4 4  help       281\n```\n\n\n:::\n:::\n\n\nIt appears that `read.csv()` has also written the row numbers to the file. This is not the desired outcome and can be prevented by adding an additional argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimported_csv <- read.csv(\"frequency_data.csv\", row.names = 1)\nprint(imported_csv) # Problem solved!\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  lemma frequency\n1 start       418\n2 enjoy       139\n3 begin       337\n4  help       281\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Import from Excel\"}\nFor importing the Excel file, we'll use the `read_xlsx()` function from\nthe `readxl` package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimported_excel <- read_xlsx(\"frequency_data.xlsx\")\nprint(imported_excel)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 2\n  lemma frequency\n  <chr>     <dbl>\n1 start       418\n2 enjoy       139\n3 begin       337\n4 help        281\n```\n\n\n:::\n:::\n\n:::\n\nThat's it! Nevertheless, remember to always check your imported data to\nensure it has been read in correctly, especially when working with CSV\nfiles.\n\n## A convenient alternative: RDS files\n\nIf the main goal is to save an intermediary result and make it available for later use, the most efficient solution would be to save the object to a local R data file ending in `.RDS`. Since it performs data compression as well, .RDS files can be considered analogous to .zip files, which are very commonly used for other data types.\n\nIn practice, we use the `saveRDS()` function and supply it with ...\n\n-   ... an R object (e.g., a vector, data frame, matrix, graphs, statistical models -- anything goes!) as well as \n\n-   ... the desired name of the file.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Save data frame \"data\" to the file \"frequency_data.RDS\"\nsaveRDS(data, \"frequency_data.RDS\")\n```\n:::\n\n\nTo read a file back in, we need to indicate the file name (or the full file path if the file is located in a different folder).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in \"frequency_data.RDS\" and assign the contents to \"data2\"\ndata2 <- readRDS(\"frequency_data.RDS\")\n\n# Verify contents\nprint(data2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  lemma frequency\n1 start       418\n2 enjoy       139\n3 begin       337\n4  help       281\n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}