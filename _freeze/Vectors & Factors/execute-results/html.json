{
  "hash": "2b04a5305641dba99167bbe0c1cd6f7c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Vectors and factors\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## Suggested reading\n\n-   Gries (2013: Chapter 2)\n\n-   James et al. (2021: Chapter 2.3)\n\n-   Winter (2019: Chapter 1)\n\n## Functions and arguments {.smaller}\n\n::: panel-tabset\n### Description\n\n::: {.fragment fragment-index=\"1\"}\n-   To call or invoke a built-in function in R you write the name of the\n    function and then enter its argument values enclosed in parentheses\n    and separated by commas.\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   **Pattern**:\n    $\\text{function}(\\text{argument}_1, \\text{argument}_2, ..., \\text{argument}_n)$\n    which translates to 'apply the function to argument$_1$,\n    argument$_2$, ..., argument$_n$'.\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   **Example**: The `seq()` function produces arithmetic sequences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 9, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Every function has a default order for the arguments. If you provide\n    arguments in this order, then they do not need to be named.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 9, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n:::\n\n### Some useful functions\n\n::: {.fragment fragment-index=\"1\"}\n-   `c()` to combine numbers or character strings into a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenate the numbers 1, 2 and 3 into vector \"a\"\na <- c(1, 2, 3)\n\n# Print \"a\"\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   `class()` and `str()` to inspect the structure of objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:3] 1 2 3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   `rm()` to remove objects from the working environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(a)\n```\n:::\n\n:::\n:::\n\n## Variables {.smaller}\n\n::: {.fragment fragment-index=\"1\"}\n-   Variables are similar to **folders**: they can be filled with\n    information, inspected, and changed.\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   To assign a value to a variable we use the **assignment command**\n    `<-`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign the value 100 to the variable x\nx <- 100\n\n# Print the content of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# or simply:\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   The variables currently stored are displayed in the **Environment**\n    tab. You can also list them in the console with `ls()`.\n:::\n\n## Vectors {.smaller}\n\n::: panel-tabset\n### Generating vectors\n\n::: {.fragment fragment-index=\"1\"}\n-   In R, vectors are **indexed lists of variables**. They can be\n    generated with the functions `c()`, `seq()` and `rep()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a character vector \"vehicles\"\nvehicles <- c(\"car\", \"truck\", \"bus\")\n\n# Print the content of vehicles\nvehicles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"   \"truck\" \"bus\"  \n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   We can access the `i`-th element of a vector `x` using the notation\n    `x[i]`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access the first element of vehicles\nvehicles[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"\n```\n\n\n:::\n:::\n\n:::\n\n### Editing vectors\n\n::: {.fragment fragment-index=\"4\"}\n-   View content of one or several indexed positions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first two elements\nvehicles[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"   \"truck\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"5\"}\n-   Where in the vector does a specific property apply?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles == \"bus\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"6\"}\n-   Do multiple properties apply?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"truck\", \"bus\") %in% vehicles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"7\"}\n-   What positions do certain elements occupy in a vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatch(c(\"truck\", \"bus\"), vehicles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Factors {.smaller}\n\n::: panel-tabset\n### Generating factors\n\n::: {.fragment fragment-index=\"1\"}\n-   First, generate a vector such as\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <- c(\"a\", \"the\", \"a\", \"a\", \"a\", \"the\", \"the\")\n```\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   Convert the vector to a factor using the `factor()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <-  factor(articles)\n```\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   Inspect the contents of the factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a   the a   a   a   the the\nLevels: a the\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Check the levels of \"articles\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"   \"the\"\n```\n\n\n:::\n:::\n\n:::\n\n### Editing factors\n\n::: {.fragment fragment-index=\"5\"}\n-   Change the reference level of a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prior to changing the reference level\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"   \"the\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Changing the reference level\narticles <- relevel(articles, ref = \"the\")\n\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"the\" \"a\"  \n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"6\"}\n-   Change a factor level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change level \"the\" to \"def_art\" (definite article)\nlevels(articles)[1] <- \"def_art\"\n\n# Change level \"a\" to \"indef_art\" (indefinite article)\nlevels(articles)[2] <- \"indef_art\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print \"articles\"\nprint(articles) # the original levels \"the\" and \"a\" have been replaced\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] indef_art def_art   indef_art indef_art indef_art def_art   def_art  \nLevels: def_art indef_art\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"7\"}\n-   Change factor back to a character/numeric vector using\n    `as.character()`or `as.numeric()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <- as.character(articles)\n\nstr(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:7] \"indef_art\" \"def_art\" \"indef_art\" \"indef_art\" \"indef_art\" ...\n```\n\n\n:::\n:::\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}