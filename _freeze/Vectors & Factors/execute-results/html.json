{
  "hash": "8a60ffde48134624eb8389b8f86fad86",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data Structures in R\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## Suggested reading\n\n-   Gries (2013: Chapter 2)\n\n-   James et al. (2021: Chapter 2.3)\n\n-   Winter (2019: Chapter 1)\n\n## Functions and arguments {.smaller}\n\n::: panel-tabset\n### Description\n\n::: {.fragment fragment-index=\"1\"}\n-   To call or invoke a built-in function in R you write the name of the\n    function and then enter its argument values enclosed in parentheses\n    and separated by commas.\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   **Pattern**:\n    $\\text{function}(\\text{argument}_1, \\text{argument}_2, ..., \\text{argument}_n)$\n    which translates to 'apply the function to argument$_1$,\n    argument$_2$, ..., argument$_n$'.\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   **Example**: The `seq()` function produces arithmetic sequences:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(from = 1, to = 9, by = 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Every function has a default order for the arguments. If you provide\n    arguments in this order, then they do not need to be named.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 9, 2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 3 5 7 9\n```\n\n\n:::\n:::\n\n:::\n\n### Some useful functions\n\n::: {.fragment fragment-index=\"1\"}\n-   `c()` to combine numbers or character strings into a vector\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Concatenate the numbers 1, 2 and 3 into vector \"a\"\na <- c(1, 2, 3)\n\n# Print \"a\"\na\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   `class()` and `str()` to inspect the structure of objects\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"numeric\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n num [1:3] 1 2 3\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   `rm()` to remove objects from the working environment\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(a)\n```\n:::\n\n:::\n:::\n\n# Variables {.smaller}\n\n::: {.fragment fragment-index=\"1\"}\n-   Variables are similar to **folders**: they can be filled with\n    information, inspected, and changed.\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   To assign a value to a variable we use the **assignment command**\n    `<-`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Assign the value 100 to the variable x\nx <- 100\n\n# Print the content of x\nprint(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# or simply:\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 100\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   The variables currently stored are displayed in the **Environment**\n    tab. You can also list them in the console with `ls()`.\n:::\n\n# Vectors {.smaller}\n\n::: panel-tabset\n## Generating vectors\n\n::: {.fragment fragment-index=\"1\"}\n-   In R, vectors are **indexed lists of variables**. They can be\n    generated with the functions `c()`, `seq()` and `rep()`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define a character vector \"vehicles\"\nvehicles <- c(\"car\", \"truck\", \"bus\")\n\n# Print the content of vehicles\nvehicles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"   \"truck\" \"bus\"  \n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   We can access the `i`-th element of a vector `x` using the notation\n    `x[i]`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Access the first element of vehicles\nvehicles[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"\n```\n\n\n:::\n:::\n\n:::\n\n## Editing vectors\n\n::: {.fragment fragment-index=\"4\"}\n-   View content of one or several indexed positions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# View the first two elements\nvehicles[1:2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"car\"   \"truck\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"5\"}\n-   Where in the vector does a specific property apply?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvehicles == \"bus\"\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE FALSE  TRUE\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"6\"}\n-   Do multiple properties apply?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"truck\", \"bus\") %in% vehicles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE TRUE\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"7\"}\n-   What positions do certain elements occupy in a vector?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmatch(c(\"truck\", \"bus\"), vehicles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 2 3\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Factors {.smaller}\n\n::: panel-tabset\n## Generating factors\n\n::: {.fragment fragment-index=\"1\"}\n-   First, generate a vector such as\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <- c(\"a\", \"the\", \"a\", \"a\", \"a\", \"the\", \"the\")\n```\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   Convert the vector to a factor using the `factor()` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <-  factor(articles)\n```\n:::\n\n:::\n\n::: {.fragment fragment-index=\"3\"}\n-   Inspect the contents of the factor\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] a   the a   a   a   the the\nLevels: a the\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Check the levels of \"articles\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"   \"the\"\n```\n\n\n:::\n:::\n\n:::\n\n## Editing factors\n\n::: {.fragment fragment-index=\"5\"}\n-   Change the reference level of a factor:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Prior to changing the reference level\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"a\"   \"the\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Changing the reference level\narticles <- relevel(articles, ref = \"the\")\n\nlevels(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"the\" \"a\"  \n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"6\"}\n-   Change a factor level:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Change level \"the\" to \"def_art\" (definite article)\nlevels(articles)[1] <- \"def_art\"\n\n# Change level \"a\" to \"indef_art\" (indefinite article)\nlevels(articles)[2] <- \"indef_art\"\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Print \"articles\"\nprint(articles) # the original levels \"the\" and \"a\" have been replaced\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] indef_art def_art   indef_art indef_art indef_art def_art   def_art  \nLevels: def_art indef_art\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"7\"}\n-   Change factor back to a character/numeric vector using\n    `as.character()`or `as.numeric()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\narticles <- as.character(articles)\n\nstr(articles)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n chr [1:7] \"indef_art\" \"def_art\" \"indef_art\" \"indef_art\" \"indef_art\" ...\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Data frames\n\n## Data frames in Base R {.smaller}\n\n::: panel-tabset\n### Generating data frames {.smaller}\n\n::: {.fragment fragment-index=\"1\"}\n-   Data frames are comparable to spreadsheets. They can be built by\n    combining multiple vectors and applying the `data.frame()` function\n    to them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the columns\nparticipant <-  c(\"louis\", \"paula\", \"vincenzo\")\nscore <- c(67, 85, 32)\n\n# Combine the columns into a data frame\nmydf <- data.frame(participant, score)\nmydf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  participant score\n1       louis    67\n2       paula    85\n3    vincenzo    32\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   You can check the structure of the data frame with `str()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mydf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  2 variables:\n $ participant: chr  \"louis\" \"paula\" \"vincenzo\"\n $ score      : num  67 85 32\n```\n\n\n:::\n:::\n\n:::\n\n### Editing data frames {.smaller}\n\n::: {.fragment fragment-index=\"3\"}\n-   The individual columns of a data frame can be accessed using the `$`\n    symbol:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf$participant\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"louis\"    \"paula\"    \"vincenzo\"\n```\n\n\n:::\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Just like with vectors, it is possible to access specific elements\n    of a data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First row\nmydf[1,]\n\n# Second column\nmydf[,2]\n\n# First two rows\nmydf[1:2,]\n\n# First column, second entry\nmydf[,1][2]\n```\n:::\n\n:::\n\n::: {.fragment fragment-index=\"5\"}\n-   Extract those cells for which a certain property applies:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the row for Vincenzo\nmydf[mydf$participant == 'vincenzo',]\n\n# Further subset this data frame to obtain the score only\nmydf[mydf$participant == 'vincenzo',]$score\n```\n:::\n\n:::\n:::\n\n## Data frames in the `tidyverse`\n\n-   Installing and loading the tidyverse\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n-   Install the dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"nycflights13\")\nlibrary(nycflights13)\nflights\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### Rows\n\n#### `filter()`\n\n-   Show flights where the departure was delayed by more than 120\n    minutes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% # specify data frame\n  filter(dep_delay > 120) # apply filter\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Flights that departed on January 1\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  filter(month == 1 & day == 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n#### `arrange()`\n\n-   Specify the order of the columns\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  arrange(year, month, day, dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Order the values of the columns in descending order\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  arrange(desc(dep_delay))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n### Columns\n\n#### `mutate()`\n\n-   Add new columns to the data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  mutate(\n    gain = dep_delay - arr_delay, # add gain column\n    speed = distance / air_time * 60, # add speed column\n    .before = 1 # add new columns to the left of the df\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   <dbl> <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n#### `select()`\n\n#### `rename()`\n\n#### `relocate()`\n\n### The pipe {.smaller}\n\n-   Depending on your goal, it may be necessary to combine the various\n    mode of data manipulation\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% # data frame\n  filter(dest == \"IAH\") |>  # only flights to IAH\n  mutate(speed = distance / air_time * 60) |>  # create column with speed\n  select(year:day, dep_time, carrier, flight, speed) |>  # choose variables\n  arrange(desc(speed)) # sort values in descending order\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   <int> <int> <int>    <int> <chr>    <int> <dbl>\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n```\n\n\n:::\n:::\n\n\n### Groups\n\n#### `group_by()` and `summarize()`\n\n-   State that all further operations should be organised by \"month\"\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  group_by(month)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n:::\n\n\n-   Compute the average delay per month\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  group_by(month) %>% \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), # second argument removes missing values\n    n = n() # shows number of rows in this group\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month delay     n\n   <int> <dbl> <int>\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n```\n\n\n:::\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}