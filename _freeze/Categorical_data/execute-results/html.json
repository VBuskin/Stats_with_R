{
  "hash": "2e6f45ac4820f2a08966226481202dad",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Categorical data\"\nauthor:\n  name: \"Vladimir Buskin\" \n  orcid: \"0009-0005-5824-1012\"\n  affiliation: \n    name: \"Catholic University of Eichstätt-Ingolstadt\"\n    department: \"English Language and Linguistics\"\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Preparation\n\nPlease download the file `Paquot_Larsson_2020_data.xlsx`\n[@paquotDescriptiveStatisticsVisualization2020][^categorical_data-1] and\nstore it in the same folder as your currently active R-script. Then run\nthe code lines below:\n\n[^categorical_data-1]: The original supplementary materials can be\n    downloaded from the publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(readxl)\nlibrary(tidyverse)\n# For publication-ready tables\nlibrary(crosstable)\nlibrary(flextable)\n\n# Load data from working directory\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n\n# Check the structure of the data frame\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n:::\n\n\n## Describing categorical data\n\nA categorical variable is made up of two or more discrete values. An\nintuitive way to describe categorical data would be to count how often\neach category occurs in the sample. These counts are then typically\nsummarised in **frequency tables** and accompanied by suitable\n**graphs** (e.g., barplots).\n\n### Frequency tables (one variable)\n\nAssume we are interested in how often each clause ordering type (\n`\"mc-sc\"` vs. `\"sc-mc\"`) is attested in our data. In R, we can obtain their\nfrequencies by inspecting the `ORDER` column of the `cl.order` dataset.\nSince manual counting isn't really an option, we will make use of the\nconvenient functions `table()` and `xtabs()`.\n\n::: {.callout-note collapse=\"true\" title=\"The workhorse: `table()`\"}\nThis function requires a character vector. We use the notation\n`cl.order$ORDER` to subset the `cl.order` data frame according to the\ncolumn `ORDER` (cf. [data frames](Data_frames.qmd)). We store the\nresults in the variable `order_freq1` (you may choose a different name\nif you like) and display the output by applying to it the `print()`\nfunction.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count occurrences of ordering types (\"mc-sc\" and \"sc-mc\") in the data frame\norder_freq1 <- table(cl.order$ORDER) \n\n# Print table\nprint(order_freq1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"More detailed: `xtabs()`\"}\nAlternatively, you could use `xtabs()` to achieve the same result. The\nsyntax is a little different, but it returns a slightly more more\ndetailed table with explicit variable label(s).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Count occurrences of ordering types (\"mc-sc\" and \"sc-mc\")\norder_freq2 <- xtabs(~ ORDER, cl.order)\n\n# Print table\nprint(order_freq2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nORDER\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n:::\n\n### Frequency tables ($\\geq$ 2 variables)\n\nIf we are interested in the relationship between **multiple categorical\nvariables**, we can cross-tabulate the frequencies of their categories.\nFor example, what is the distribution of clause order depending on the\ntype of subordinate clause? The output is also referred to as a\n**contingency table**.\n\n::: {.callout-note collapse=\"true\" title=\"The `table()` way\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Get frequencies of ordering tpyes (\"mc-sc\" vs. \"sc-mc\") depending on the type of subordinate clause (\"caus\" vs. \"temp\")\norder_counts1 <- table(cl.order$ORDER, cl.order$SUBORDTYPE)\n\n# Print contingency table\nprint(order_counts1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"The `xtabs()` way\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cross-tabulate ORDER and SUBORDTYPE\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Print cross-table\nprint(order_counts2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SUBORDTYPE\nORDER   caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n:::\n\n### Percentage tables\n\nThere are several ways to compute percentages for your cross-tables, but\nby far the simplest is via the `prop.table()` function. As it only\nprovides proportions, you can multiply the output by 100 to obtain real\npercentages.\n\n::: {.callout-note collapse=\"true\" title=\"Get percentages for a `table()` object\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to % using the prop.table() function\npct1 <- prop.table(order_counts1) * 100\n\n# Print percentages\nprint(pct1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n             caus      temp\n  mc-sc 45.657568 22.580645\n  sc-mc  3.722084 28.039702\n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Get percentages for an `xtabs()` object\"}\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert to % using the prop.table() function\npct2 <- prop.table(order_counts2) * 100\n\n# Print percentages\nprint(pct2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SUBORDTYPE\nORDER        caus      temp\n  mc-sc 45.657568 22.580645\n  sc-mc  3.722084 28.039702\n```\n\n\n:::\n:::\n\n\nNotice how `pct2` still carries the variable labels `SUBORDTYPE` and\n`ORDER`, which is very convenient.\n:::\n\n## Plotting categorical data\n\nThis section demonstrates both the in-built plotting functions of R\n('Base R') as well as the more modern versions provided by the\n`tidyverse` package.\n\n::: {.callout-tip collapse=\"true\"}\n### Mosaicplots (raw counts)\n\nA straightforward way to visualise a contingency table is the\nmosaicplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Works with raw counts and percentages\n# Using the output of xtabs() as input\nmosaicplot(order_counts2, color = TRUE)\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n### Barplots (raw counts)\n\nThe workhorse of categorical data analysis is the barplot. Base R\nfunctions usually require a `table` object as input, whereas `ggplot2`\ncan operate on the raw dataset.\n\n### One variable\n\n::: panel-tabset\n### Base R\n\n-   Base R barplot with `barplot()`; requires the counts as computed by\n    `tables()` or `xtabs()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate cross-table\norder_freq1 <- table(cl.order$ORDER)\n\n# Create barplot\nbarplot(order_freq1)\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n-   Barplot with `geom_bar()` using the raw input data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requirement: library(tidyverse)\n\n# Raw input data\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n\n```{.r .cell-code}\n# Create barplot\nggplot(cl.order, aes(x = ORDER)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n### Two variables\n\nBivariate barplots can be obtained by either supplying a contingency\ntable (Base R) or by mapping the second variable onto the `fill`\nargument using the raw data.\n\n::: panel-tabset\n### Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate cross-table with two variables\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Create simple barplot\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Base R (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Generate cross-table with two variables\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Customise barplot with axis labels, colours and legend\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars dodged (i.e., side by side)\n        main = \"Distribution of ORDER by SUBORDTYPE (Base R)\", \n        xlab = \"ORDER\", \n        ylab = \"Frequency\", \n        col = c(\"lightblue\", \"lightgreen\"), # Customize colors\n        legend = TRUE,  # Add a legend\n        args.legend = list(title = \"SUBORDTYPE\", x = \"topright\"))\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requirement: library(tidyverse)\n\n# Create simple barplot with the ggplot() function\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### ggplot2 (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requirement: library(tidyverse)\n\n# Fully customised ggplot2 object\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\") +\n  labs(\n    title = \"Clause order by subordinate clause type\",\n    x = \"Clause order\",\n    y = \"Frequency\",\n    fill = \"Type of subordinate clause\"\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n### Barplots (percentages)\n\n::: panel-tabset\n#### Base R\n\nIn very much the same way as with the raw counts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create simple barplot with a percentage table as input\nbarplot(pct1, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n#### ggplot2\n\nHere, a few tweaks are necessary. Because the `ggplot()` function\nprefers to works with data frames rather than cross-tables, we'll have\nto coerce it into one first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert a percentage table to a data frame\n# My recommendation: Use the pct2 object, which was generated using xtabs() because it will keep the variable names\npct2_df <- as.data.frame(pct2)\n\nprint(pct2_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  ORDER SUBORDTYPE      Freq\n1 mc-sc       caus 45.657568\n2 sc-mc       caus  3.722084\n3 mc-sc       temp 22.580645\n4 sc-mc       temp 28.039702\n```\n\n\n:::\n:::\n\n\nNow we can plot the percentages with `geom_col()`. This geom (=\n'geometric object') allows us to manually specify what should be mapped\nonto the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requirement: library(tidyverse)\n\n# Create barplot with user-defined y-axis, which requires geom_col() rather than geom_bar()\nggplot(pct2_df, aes(x = ORDER, y = Freq, fill = SUBORDTYPE)) +\n  geom_col(position = \"dodge\") +\n  labs(y = \"Frequency (in %)\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n:::\n:::\n\n::: {.callout-tip collapse=\"true\"}\n### Bubble plot (percentages)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requirement: library(tidyverse)\n\n# Bubble plot\nggplot(pct2_df, aes(x = ORDER, y = SUBORDTYPE, size = Freq)) +\n  geom_point(color = \"skyblue\", alpha = 0.7) +\n  scale_size_continuous(range = c(5, 20)) +  # Adjust bubble size range\n  labs(title = \"Bubble Plot of ORDER by SUBORDTYPE\",\n       x = \"ORDER\",\n       y = \"SUBORDTYPE\",\n       size = \"Percentage\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-tip collapse=\"true\"}\n### Alluvial plot (percentages)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Make sure to install this library prior to running the code below \nlibrary(ggalluvial)\n\nggplot(pct2_df,\n       aes(axis1 = ORDER, axis2 = SUBORDTYPE, y = Freq)) +\n  geom_alluvium(aes(fill = ORDER)) +\n  geom_stratum(fill = \"gray\") +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  labs(title = \"Alluvial Plot of ORDER by SUBORDTYPE\",\n       x = \"Categories\", y = \"Percentage\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n:::\n\n## Exporting tables to MS Word\n\nThe `crosstable` and `flextable` packages make it very easy to export\nelegant tables to MS Word.\n\n::: {.callout-note collapse=\"true\" title=\"Clean and to the point: `crosstable()`\"}\nThis is perhaps the most elegant solution. Generate a `crosstable()`\nobject by supplying at the very least ...\n\n-   the original dataset (`data = cl.order`),\n-   the dependent variable (`cols = ORDER`), and\n-   the independent variable (`by = SUBORDTYPE`).\n\nYou can further specify ...\n\n-   whether to include column totals, row totals or both (here:\n    `total = both`),\n-   the rounding scheme (here: `percent_digits = 2`),\n-   ...\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Required libraries:\n# library(crosstable)\n# library(flextable)\n\n# Create the cross table\noutput1 <- crosstable(data = cl.order,\n                      cols = ORDER, \n                      by = SUBORDTYPE, \n                      total = \"both\",\n                      percent_digits = 2)\n\n# Generate file\nas_flextable(output1)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-18e4cdc0{}.cl-18dccfda{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-18dccfee{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-18e01410{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-18e01424{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-18e028c4{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028c5{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028ce{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028cf{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028d8{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028e2{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028e3{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028e4{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028ec{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028ed{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028f6{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028f7{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028f8{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e028f9{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e02900{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-18e02901{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-18e4cdc0'><thead><tr style=\"overflow-wrap:break-word;\"><th  rowspan=\"2\"class=\"cl-18e028c4\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">label</span></p></th><th  rowspan=\"2\"class=\"cl-18e028c5\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">variable</span></p></th><th  colspan=\"2\"class=\"cl-18e028ce\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">SUBORDTYPE</span></p></th><th  rowspan=\"2\"class=\"cl-18e028cf\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">Total</span></p></th></tr><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-18e028e3\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">caus</span></p></th><th class=\"cl-18e028e3\"><p class=\"cl-18e01410\"><span class=\"cl-18dccfda\">temp</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"3\"class=\"cl-18e028ec\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">ORDER</span></p></td><td class=\"cl-18e028ed\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">mc-sc</span></p></td><td class=\"cl-18e028f6\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">184 (66.91%)</span></p></td><td class=\"cl-18e028f6\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">91 (33.09%)</span></p></td><td class=\"cl-18e028f7\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">275 (68.24%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-18e028ed\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">sc-mc</span></p></td><td class=\"cl-18e028f6\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">15 (11.72%)</span></p></td><td class=\"cl-18e028f6\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">113 (88.28%)</span></p></td><td class=\"cl-18e028f7\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">128 (31.76%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-18e028f9\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">Total</span></p></td><td class=\"cl-18e02900\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">199 (49.38%)</span></p></td><td class=\"cl-18e02900\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">204 (50.62%)</span></p></td><td class=\"cl-18e02901\"><p class=\"cl-18e01424\"><span class=\"cl-18dccfee\">403 (100.00%)</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"How much info do you need? Yes.\"}\nIt also possible to use `as_flextable()` without pre-processing the data\nwith `crosstable()`; supplying a table preferably created with `xtabs()`\nis sufficient. Without any doubt, the output is extremely informative,\nyet it is everything but reader-friendly.\n\nFor this reason, I recommend relying on the less overwhelming\n`crosstable()` option above if a plain and easy result is desired.\nHowever, readers who would like to leverage the full capabilities of the\n`flextable()` package and familiarise themselves with the abundant\noptions for customisation, can find the detailed documentation\n[here](https://ardata-fr.github.io/flextable-book/crosstabs.html#using-tables).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Requires the following library:\n# library(flextable)\n\n# Create a table\ntab1 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Directly convert a table to a flextable with as_flextable()\noutput_1 <- as_flextable(tab1)\n\n# Print output\nprint(output_1)\n```\n:::\n\n\n![](crosstable_plot1.png)\n:::\n",
    "supporting": [
      "Categorical_data_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}