{
  "hash": "72244bb6abb132a011a6a3a285595370",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Categorical data\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: false\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Preparation\n\nPlease download the file \"Paquot_Larsson_2020_data.xlsx\"\n[@paquotDescriptiveStatisticsVisualization2020][^categorical_data-1] and\nstore it in the same folder as your currently active R-script. Then run\nthe code lines below:\n\n[^categorical_data-1]: The original supplementary materials can be\n    downloaded from the publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(\"readxl\") # for loading Excel data\nlibrary(\"tidyverse\") # data manipulation and visualisation\n\n# Load data from working directory\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n```\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"What's in the file? The `str()` function\"}\nThe easiest way to get a general overview of the full data set is to\napply the `str()` function to the respective data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\ntibble [403 × 8] (S3: tbl_df/tbl/data.frame)\n $ CASE       : num [1:403] 4777 1698 953 1681 4055 ...\n $ ORDER      : chr [1:403] \"sc-mc\" \"mc-sc\" \"sc-mc\" \"mc-sc\" ...\n $ SUBORDTYPE : chr [1:403] \"temp\" \"temp\" \"temp\" \"temp\" ...\n $ LEN_MC     : num [1:403] 4 7 12 6 9 9 9 4 6 4 ...\n $ LEN_SC     : num [1:403] 10 6 7 15 5 5 12 2 24 11 ...\n $ LENGTH_DIFF: num [1:403] -6 1 5 -9 4 4 -3 2 -18 -7 ...\n $ CONJ       : chr [1:403] \"als/when\" \"als/when\" \"als/when\" \"als/when\" ...\n $ MORETHAN2CL: chr [1:403] \"no\" \"no\" \"yes\" \"no\" ...\n```\n\n\n:::\n:::\n\n\nThis shows us that the data frame has 8 columns, as the `$` operators\nindicate (`$ Case`, `$ ORDER`, ...). The column names are followed by\n\n-   the data type (`num` for numeric and `chr` for character strings)\n\n-   the number of values (`` `[1:403]` ``) and\n\n-   the first few observations.\n\nAnother intuitive way to display the structure of a data matrix is to\nsimply show the first few rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(cl.order)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  <dbl> <chr> <chr>       <dbl>  <dbl>       <dbl> <chr>    <chr>      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes        \n```\n\n\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"Further details on the variables\"}\nThe data frame contains the **dependent variable**\n\n-   `ORDER`: Does the subordinate clause come before or after the main\n    clause? ('sc-mc' vs. 'mc-sc')\n\n... and the **independent variables**:\n\n-   `SUBORDTYPE`: Is the subordinate clause temporal or causal? ('temp'\n    vs. 'caus')\n\n-   `MORETHAN2CL`: Are there most clauses in the sentence than just one\n    subordinate clause and one main clause? ('yes' vs. 'no')\n\n-   `LEN_MC`: How many words does the main clause contain? (ratio-scaled\n    continuous variable)\n\n-   `LEN_SC`: How many words does the subordinate clause contain?\n    (ratio-scaled continuous variable)\n\n-   `LENGTH_DIFF`: What is the length difference in words between the\n    main clause and subordinate clause? (ratio-scaled continuous\n    variables)\n:::\n\n## Frequency tables\n\nEach categorical variable in the data frame is made up of two or more\ncategories. A simple descriptive measure is the frequency of each\ncategory. The table below indicates how often each clause order occurs\nin the `ORDER` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_freq1 <- table(cl.order$ORDER) \n\nprint(order_freq1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n\nThe notation `cl.order$ORDER` subsets the `cl.order` according to the\ncolumn `ORDER` (see [data frames](Data_frames.qmd)).\n\nAlternatively, you could use `xtabs()` to achieve the same result --\nperhaps with a slightly more intuitive syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_freq2 <- xtabs(~ ORDER, cl.order)\n\nprint(order_freq2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nORDER\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n\nIf we are interested in the relationship between **multiple categorical\nvariables**, we can cross-tabulate the frequencies of their categories.\nFor example, what is the distribution of clause order depending on the\ntype of subordinate clause? The output is also referred to as a\n**contingency table**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts1 <- table(cl.order$ORDER, cl.order$SUBORDTYPE)\n\nprint(order_counts1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n\nHere is the `xtabs()` alternative:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\nprint(order_counts2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SUBORDTYPE\nORDER   caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"How do I obtain percentage tables?\"}\nThere are two ways to convert the raw frequency counts to percentage\ntables:\n\n1.  Manually divide all cells by the total number of observations (which\n    correspond to the sum of all cells) and multiply the result by 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct1 <- order_counts1/sum(order_counts1) * 100\n```\n:::\n\n\n2.  Use the `prop.table()` function and multiply the result by 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct2 <- prop.table(order_counts1) * 100\n```\n:::\n\n:::\n\n## Visualising discrete distributions\n\nThis section demonstrates both the in-built plotting functions of R\n('Base R') as well as the more modern versions provided by the `tidyverse` package.\n\n### One variable\n\n::: panel-tabset\n### Base R\n\n-   Base R barplot with `barplot()`; requires the counts as computed by\n    `tables()` or `xtabs()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(order_freq1) # Supply the counts\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n-   Barplot with `geom_bar()` using the raw input data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n:::\n\n### Two variables\n\n-   Barplots with the `fill` argument\n\n::: panel-tabset\n### Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### Base R (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars dodged (i.e., side by side)\n        main = \"Distribution of ORDER by SUBORDTYPE (Base R)\", \n        xlab = \"ORDER\", \n        ylab = \"Frequency\", \n        col = c(\"lightblue\", \"lightgreen\"), # Customize colors\n        legend = TRUE,  # Add a legend\n        args.legend = list(title = \"SUBORDTYPE\", x = \"topright\"))\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n### ggplot2 (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\") +\n  labs(\n    title = \"Clause order by subordinate clause type\",\n    x = \"Clause order\",\n    y = \"Frequency\",\n    fill = \"Type of subordinate clause\"\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n:::\n\n## Plotting percentages\n\n::: {.callout-note collapse=\"true\" title=\"How do I plot percentages in Base R?\"}\nIn very much the same way as with the raw counts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(pct1, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"How do I plot percentages with `ggplot2`?\"}\n\nHere, a few tweaks are necessary. In general, the `ggplot()` function only works\nwith data frames and not with table objects, so we'll have to convert it to one first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct1_df <- as.data.frame(pct1)\n\nprint(pct1_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Var1 Var2      Freq\n1 mc-sc caus 45.657568\n2 sc-mc caus  3.722084\n3 mc-sc temp 22.580645\n4 sc-mc temp 28.039702\n```\n\n\n:::\n:::\n\n\nNow we can plot the percentages with `geom_col()`. This geom (=\n'geometric object') allows us to manually specify what should be mapped\nonto the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(pct1_df, aes(x = Var1, y = Freq, fill = Var2)) +\n  geom_col(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n:::\n\n## Exporting tables to MS Word\n\nThe `flextable` package greatly facilitates generating publication-ready tables in R. It provides the best output if used on a table created by `xtabs()`. The full guide to this package can be found\n[here](https://ardata-fr.github.io/flextable-book/crosstabs.html#using-tables).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load library after installation\nlibrary(flextable)\n\n# Create a table\ntab1 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Convert a table to a flextable with as_flextable()\noutput_1 <- as_flextable(tab1)\n\n# Print output\nprint(output_1)\n```\n:::\n\n\n![](crosstable_plot1.png)\n\nUnfortunately, the output cannot really be customised. However, if you'd like to add some further options, the `crosstable` package provides a remedy. In fact, it is even easier to use as it doesn't require you to compute any tables beforehand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Required libraries\nlibrary(crosstable)\nlibrary(flextable)\n\n# Create the cross table\noutput2 <- crosstable(cl.order, ORDER, by = SUBORDTYPE, \n                 total = \"both\",\n                 percent_digits = 2)\n\nas_flextable(output2)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-8a797ad0{}.cl-8a714220{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-8a714234{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-8a74a596{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-8a74a5a0{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-8a74bd92{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bd9c{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bda6{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bda7{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdb0{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdb1{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdb2{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdba{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdbb{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdbc{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdc4{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdc5{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdc6{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdc7{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdce{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-8a74bdcf{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-8a797ad0'><thead><tr style=\"overflow-wrap:break-word;\"><th  rowspan=\"2\"class=\"cl-8a74bd92\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">label</span></p></th><th  rowspan=\"2\"class=\"cl-8a74bd9c\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">variable</span></p></th><th  colspan=\"2\"class=\"cl-8a74bda6\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">SUBORDTYPE</span></p></th><th  rowspan=\"2\"class=\"cl-8a74bda7\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">Total</span></p></th></tr><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-8a74bdb2\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">caus</span></p></th><th class=\"cl-8a74bdb2\"><p class=\"cl-8a74a596\"><span class=\"cl-8a714220\">temp</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"3\"class=\"cl-8a74bdbb\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">ORDER</span></p></td><td class=\"cl-8a74bdbc\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">mc-sc</span></p></td><td class=\"cl-8a74bdc4\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">184 (66.91%)</span></p></td><td class=\"cl-8a74bdc4\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">91 (33.09%)</span></p></td><td class=\"cl-8a74bdc5\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">275 (68.24%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-8a74bdbc\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">sc-mc</span></p></td><td class=\"cl-8a74bdc4\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">15 (11.72%)</span></p></td><td class=\"cl-8a74bdc4\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">113 (88.28%)</span></p></td><td class=\"cl-8a74bdc5\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">128 (31.76%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-8a74bdc7\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">Total</span></p></td><td class=\"cl-8a74bdce\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">199 (49.38%)</span></p></td><td class=\"cl-8a74bdce\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">204 (50.62%)</span></p></td><td class=\"cl-8a74bdcf\"><p class=\"cl-8a74a5a0\"><span class=\"cl-8a714234\">403 (100.00%)</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n",
    "supporting": [
      "Categorical_data_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}