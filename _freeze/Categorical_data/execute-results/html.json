{
  "hash": "5eb2a1ccbb942e99fb5203d20d629efe",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Categorical data\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: false\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\neditor: visual\nbibliography: R.bib\n---\n\n\n## Preparation\n\nPlease download the file \"Paquot_Larsson_2020_data.xlsx\"\n[@paquotDescriptiveStatisticsVisualization2020][^categorical_data-1] and\nstore it in the same folder as your currently active R-script. Then run\nthe code lines below:\n\n[^categorical_data-1]: The original supplementary materials can be\n    downloaded from the publisher's\n    [website](https://link.springer.com/chapter/10.1007/978-3-030-46216-1_17)\n    \\[Last accessed April 28, 2024\\].\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Libraries\nlibrary(\"readxl\") # for loading Excel data\nlibrary(\"tidyverse\") # data manipulation and visualisation\n\n# Load data from working directory\ncl.order <- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n```\n:::\n\n\n## Frequency tables\n\n### One variable\n\nEach categorical variable in the data frame is made up of two or more\ncategories. A simple descriptive measure is the frequency of each\ncategory. The table below indicates how often each clause order occurs\nin the `ORDER` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_freq1 <- table(cl.order$ORDER) \n\nprint(order_freq1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n\nThe notation `cl.order$ORDER` subsets the `cl.order` according to the\ncolumn `ORDER` (see [data frames](Data_frames.qmd)).\n\nAlternatively, you could use `xtabs()` to achieve the same result --\nperhaps with a slightly more intuitive syntax.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_freq2 <- xtabs(~ ORDER, cl.order)\n\nprint(order_freq2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nORDER\nmc-sc sc-mc \n  275   128 \n```\n\n\n:::\n:::\n\n\n### Two or more variables\n\nIf we are interested in the relationship between **multiple categorical\nvariables**, we can cross-tabulate the frequencies of their categories.\nFor example, what is the distribution of clause order depending on the\ntype of subordinate clause? The output is also referred to as a\n**contingency table**.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts1 <- table(cl.order$ORDER, cl.order$SUBORDTYPE)\n\nprint(order_counts1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       \n        caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n\nHere is the `xtabs()` alternative:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\nprint(order_counts2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n       SUBORDTYPE\nORDER   caus temp\n  mc-sc  184   91\n  sc-mc   15  113\n```\n\n\n:::\n:::\n\n\n::: {.callout-note collapse=\"true\" title=\"How do I obtain percentage tables?\"}\nThere are two ways to convert the raw frequency counts to percentage\ntables:\n\n1.  Manually divide all cells by the total number of observations (which\n    correspond to the sum of all cells) and multiply the result by 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct1 <- order_counts1/sum(order_counts1) * 100\n```\n:::\n\n\n2.  Use the `prop.table()` function and multiply the result by 100.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct2 <- prop.table(order_counts1) * 100\n```\n:::\n\n:::\n\n## Plotting categorical data\n\nThis section demonstrates both the in-built plotting functions of R\n('Base R') as well as the more modern versions provided by the\n`tidyverse` package.\n\n### Moscaiplot\n\nA straightforward way to visualise a contingency table is the\nmosaicplot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmosaicplot(order_counts2, color = TRUE)\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n### Barplots\n\nThe workhorse of categorical data analysis is the barplot. Base R\nfunctions usually require a `table` object as input, whereas `ggplot2`\ncan operate on the raw dataset.\n\n### One variable\n\n::: panel-tabset\n### Base R\n\n-   Base R barplot with `barplot()`; requires the counts as computed by\n    `tables()` or `xtabs()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_freq1 <- table(cl.order$ORDER)\n\nbarplot(order_freq1)\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n-   Barplot with `geom_bar()` using the raw input data\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n:::\n\n### Two variables\n\n-   Barplots with the `fill` argument\n\n::: panel-tabset\n### Base R\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n### Base R (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\norder_counts2 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\nbarplot(order_counts2, \n        beside = TRUE,  # Make bars dodged (i.e., side by side)\n        main = \"Distribution of ORDER by SUBORDTYPE (Base R)\", \n        xlab = \"ORDER\", \n        ylab = \"Frequency\", \n        col = c(\"lightblue\", \"lightgreen\"), # Customize colors\n        legend = TRUE,  # Add a legend\n        args.legend = list(title = \"SUBORDTYPE\", x = \"topright\"))\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n### ggplot2\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n### ggplot2 (fully customised)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\") +\n  labs(\n    title = \"Clause order by subordinate clause type\",\n    x = \"Clause order\",\n    y = \"Frequency\",\n    fill = \"Type of subordinate clause\"\n  ) +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n:::\n\n## Plotting percentages\n\n::: {.callout-note collapse=\"true\" title=\"How do I plot percentages in Base R?\"}\nIn very much the same way as with the raw counts:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbarplot(pct1, \n        beside = TRUE,  # Make bars side-by-side\n        legend = TRUE)  # Add a legend\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n:::\n\n::: {.callout-note collapse=\"true\" title=\"How do I plot percentages with `ggplot2`?\"}\nHere, a few tweaks are necessary. In general, the `ggplot()` function\nprefers to works with data frames rather than cross-tables, so we'll\nhave to coerce it into one first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npct1_df <- as.data.frame(pct1)\n\nprint(pct1_df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Var1 Var2      Freq\n1 mc-sc caus 45.657568\n2 sc-mc caus  3.722084\n3 mc-sc temp 22.580645\n4 sc-mc temp 28.039702\n```\n\n\n:::\n:::\n\n\nNow we can plot the percentages with `geom_col()`. This geom (=\n'geometric object') allows us to manually specify what should be mapped\nonto the y-axis:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n\nggplot(pct1_df, aes(x = Var1, y = Freq, fill = Var2)) +\n  geom_col(position = \"dodge\")\n```\n\n::: {.cell-output-display}\n![](Categorical_data_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n:::\n\n## Exporting tables to MS Word\n\nThe `flextable` package greatly facilitates generating publication-ready\ntables in R. It provides the best output if used on a table created by\n`xtabs()`. The full guide to this package can be found\n[here](https://ardata-fr.github.io/flextable-book/crosstabs.html#using-tables).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load library after installation\nlibrary(flextable)\n\n# Create a table\ntab1 <- xtabs(~ ORDER + SUBORDTYPE, cl.order)\n\n# Convert a table to a flextable with as_flextable()\noutput_1 <- as_flextable(tab1)\n\n# Print output\nprint(output_1)\n```\n:::\n\n\n![](crosstable_plot1.png)\n\nUnfortunately, the output cannot really be customised. However, if you'd\nlike to add some further options, the `crosstable` package provides a\nremedy. In fact, it is even easier to use as it doesn't require you to\ncompute any tables beforehand.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Required libraries\nlibrary(crosstable)\nlibrary(flextable)\n\n# Create the cross table\noutput2 <- crosstable(cl.order, ORDER, by = SUBORDTYPE, \n                 total = \"both\",\n                 percent_digits = 2)\n\nas_flextable(output2)\n```\n\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"tabwid\"><style>.cl-51995d48{}.cl-51914c52{font-family:'Helvetica';font-size:11pt;font-weight:bold;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-51914c66{font-family:'Helvetica';font-size:11pt;font-weight:normal;font-style:normal;text-decoration:none;color:rgba(0, 0, 0, 1.00);background-color:transparent;}.cl-51950220{margin:0;text-align:center;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-5195022a{margin:0;text-align:left;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);padding-bottom:5pt;padding-top:5pt;padding-left:5pt;padding-right:5pt;line-height: 1;background-color:transparent;}.cl-519518dc{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518e6{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518e7{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518f0{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1.5pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518f1{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518fa{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518fb{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-519518fc{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(0, 0, 0, 1.00);border-top: 1pt solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(255, 255, 255, 0.00);border-right: 0 solid rgba(255, 255, 255, 0.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951904{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951905{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951906{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-5195190e{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-5195190f{width:0.837in;background-color:transparent;vertical-align: middle;border-bottom: 0 solid rgba(0, 0, 0, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951910{width:0.863in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951911{width:1.202in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}.cl-51951918{width:1.287in;background-color:transparent;vertical-align: middle;border-bottom: 1.5pt solid rgba(102, 102, 102, 1.00);border-top: 0 solid rgba(0, 0, 0, 1.00);border-left: 0 solid rgba(0, 0, 0, 1.00);border-right: 0 solid rgba(0, 0, 0, 1.00);margin-bottom:0;margin-top:0;margin-left:0;margin-right:0;}</style><table data-quarto-disable-processing='true' class='cl-51995d48'><thead><tr style=\"overflow-wrap:break-word;\"><th  rowspan=\"2\"class=\"cl-519518dc\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">label</span></p></th><th  rowspan=\"2\"class=\"cl-519518e6\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">variable</span></p></th><th  colspan=\"2\"class=\"cl-519518e7\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">SUBORDTYPE</span></p></th><th  rowspan=\"2\"class=\"cl-519518f0\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">Total</span></p></th></tr><tr style=\"overflow-wrap:break-word;\"><th class=\"cl-519518fb\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">caus</span></p></th><th class=\"cl-519518fb\"><p class=\"cl-51950220\"><span class=\"cl-51914c52\">temp</span></p></th></tr></thead><tbody><tr style=\"overflow-wrap:break-word;\"><td  rowspan=\"3\"class=\"cl-51951904\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">ORDER</span></p></td><td class=\"cl-51951905\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">mc-sc</span></p></td><td class=\"cl-51951906\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">184 (66.91%)</span></p></td><td class=\"cl-51951906\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">91 (33.09%)</span></p></td><td class=\"cl-5195190e\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">275 (68.24%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-51951905\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">sc-mc</span></p></td><td class=\"cl-51951906\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">15 (11.72%)</span></p></td><td class=\"cl-51951906\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">113 (88.28%)</span></p></td><td class=\"cl-5195190e\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">128 (31.76%)</span></p></td></tr><tr style=\"overflow-wrap:break-word;\"><td class=\"cl-51951910\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">Total</span></p></td><td class=\"cl-51951911\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">199 (49.38%)</span></p></td><td class=\"cl-51951911\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">204 (50.62%)</span></p></td><td class=\"cl-51951918\"><p class=\"cl-5195022a\"><span class=\"cl-51914c66\">403 (100.00%)</span></p></td></tr></tbody></table></div>\n```\n\n:::\n:::\n",
    "supporting": [
      "Categorical_data_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/tabwid-1.1.3/tabwid.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/tabwid-1.1.3/tabwid.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}