{
  "hash": "ecff106fe3b0a9efc0ed113c335c47c7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data frames\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## Data frames in Base R {.smaller}\n\n-   Today's script: 3_Data_frames.R\n\n-   This session is primarily based on [Wickham et al. (2023: Chapter\n    3)](https://r4ds.hadley.nz/data-transform)\n\n\n\n\n\n::: panel-tabset\n#### Generating data frames {.smaller}\n\n::: {.fragment fragment-index=\"1\"}\n-   Data frames are comparable to spreadsheets. They can be built by\n    combining multiple vectors and applying the `data.frame()` function\n    to them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Define the columns\nparticipant <-  c(\"louis\", \"paula\", \"vincenzo\")\nscore <- c(67, 85, 32)\n\n# Combine the columns into a data frame\nmydf <- data.frame(participant, score)\nmydf\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  participant score\n1       louis    67\n2       paula    85\n3    vincenzo    32\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n:::\n\n::: {.fragment fragment-index=\"2\"}\n-   You can check the structure of the data frame with `str().`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mydf)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n'data.frame':\t3 obs. of  2 variables:\n $ participant: chr  \"louis\" \"paula\" \"vincenzo\"\n $ score      : num  67 85 32\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n:::\n\n#### Editing data frames {.smaller}\n\n::: {.fragment fragment-index=\"3\"}\n-   The individual columns of a data frame can be accessed using the `$`\n    symbol. The output is a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmydf$participant\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"louis\"    \"paula\"    \"vincenzo\"\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n:::\n\n::: {.fragment fragment-index=\"4\"}\n-   Just like with vectors, it is possible to access specific elements\n    of a data frame:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First row\nmydf[1,]\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  participant score\n1       louis    67\n```\n\n\n:::\n\n\n\n</details>\n\n```{.r .cell-code}\n# Second column\nmydf[,2]\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 67 85 32\n```\n\n\n:::\n\n\n\n</details>\n\n```{.r .cell-code}\n# First two rows\nmydf[1:2,]\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  participant score\n1       louis    67\n2       paula    85\n```\n\n\n:::\n\n\n\n</details>\n\n```{.r .cell-code}\n# First column, second entry\nmydf[,1][2]\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"paula\"\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n:::\n\n::: {.fragment fragment-index=\"5\"}\n-   Extract only those cells where a certain property applies:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract the row for the participant Vincenzo\nmydf[mydf$participant == 'vincenzo',]\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  participant score\n3    vincenzo    32\n```\n\n\n:::\n\n\n\n</details>\n\n```{.r .cell-code}\n# Further subset this data frame to obtain Vincenzo's score only\nmydf[mydf$participant == 'vincenzo',]$score\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n:::\n:::\n\n## Basics of R III: Data frames in the `tidyverse` {.smaller}\n\n-   Load the `tidyverse` library to gain access to a large set of data\n    manipulation and visualisation tools. If you have not installed it\n    yet, uncomment the first line of the following code and run it.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\n```\n:::\n\n\n-   Repeat the same procedure for the packages `readxl` and `writexl` to\n    be able to read from and write to Microsoft Excel (.xlsx) files.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#install.packages(\"readxl\")\nlibrary(\"readxl\")\n#install.packages(\"writexl\")\nlibrary(\"writexl\")\n```\n:::\n\n\n-   Download the large spreadsheet file **NYC_flights_data.xlsx** from\n    ILIAS and place it in your `data` folder. Now import the dataset\n    (cf. instructions in the script file) and store it in a variable\n    `flights`.\n\n\n::: {.cell}\n\n:::\n\n\n### Rows\n\n#### `filter()`\n\n-   Show flights where the departure was delayed by more than 120\n    minutes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% # pass the \"flights\" data frame on to the next function\n  filter(dep_delay > 120) # apply filter\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n-   Show flights that departed on 01 January:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  filter(month == 1 & day == 1) # \"&\" operator means 'and'\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n::: callout-tip\n## Coding style\n\nThe above examples can also be rewritten in the form\n`function(data frame, argument)`. This is only a viable alternative as\nlong as no further functions are added (compared to, e.g., the example\nin 2.3).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilter(flights, dep_delay > 120)\n\nfilter(flights, month == 1 & day == 1)\n```\n:::\n\n:::\n\n#### `arrange()`\n\n-   Rearrange rows based on column values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  arrange(dep_delay)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013    12     7     2040           2123       -43       40           2352\n 2  2013     2     3     2022           2055       -33     2240           2338\n 3  2013    11    10     1408           1440       -32     1549           1559\n 4  2013     1    11     1900           1930       -30     2233           2243\n 5  2013     1    29     1703           1730       -27     1947           1957\n 6  2013     8     9      729            755       -26     1002            955\n 7  2013    10    23     1907           1932       -25     2143           2143\n 8  2013     3    30     2030           2055       -25     2213           2250\n 9  2013     3     2     1431           1455       -24     1601           1631\n10  2013     5     5      934            958       -24     1225           1309\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n-   Arrange the column values in descending order:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  arrange(desc(dep_delay))\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n### Columns\n\n#### `mutate()`\n\n-   Add new columns to the data frame based on existing ones:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  mutate(\n    gain = dep_delay - arr_delay, # add gain column\n    speed = distance / air_time * 60, # add speed column\n    .before = 1 # add new columns to the left of the df\n  )\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   <dbl> <dbl> <int> <int> <int>    <int>          <int>     <dbl>    <int>\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time <int>, arr_delay <dbl>, carrier <chr>,\n#   flight <int>, tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>,\n#   distance <dbl>, hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n#### `select()`\n\n-   Choose the variables to be used for further analysis and,\n    conversely, exclude all others:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  select(origin, dest)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 2\n   origin dest \n   <chr>  <chr>\n 1 EWR    IAH  \n 2 LGA    IAH  \n 3 JFK    MIA  \n 4 JFK    BQN  \n 5 LGA    ATL  \n 6 EWR    ORD  \n 7 EWR    FLL  \n 8 LGA    IAD  \n 9 JFK    MCO  \n10 LGA    ORD  \n# ℹ 336,766 more rows\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n#### `rename()`\n\n-   Change the name of an existing column with `rename()`. For example,\n    replace the old column names of *dep_time*, *sched_dep_time* and\n    *dep_delay* with *dep.time*, *sched.dep.time* and *dep.delay*,\n    respectively.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%\n  rename(dep.time = dep_time,\n         sched.dep.time = sched_dep_time,\n         dep.delay = dep_delay\n         ) # new name = old name\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep.time sched.dep.time dep.delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n#### `relocate()`\n\n-   The column arguments of `relocate()` are moved to different\n    positions in the tibble. Without additional specification, the\n    function moves them to the beginning:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  relocate(day, month, year)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n     day month  year dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1     1     1  2013      517            515         2      830            819\n 2     1     1  2013      533            529         4      850            830\n 3     1     1  2013      542            540         2      923            850\n 4     1     1  2013      544            545        -1     1004           1022\n 5     1     1  2013      554            600        -6      812            837\n 6     1     1  2013      554            558        -4      740            728\n 7     1     1  2013      555            600        -5      913            854\n 8     1     1  2013      557            600        -3      709            723\n 9     1     1  2013      557            600        -3      838            846\n10     1     1  2013      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n-   The optional arguments `.before()` and `.after()` provide explicit\n    instructions for column positioning. The default values are `NULL`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% \n  relocate(year:dep_time, .after = sched_dep_time)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n   sched_dep_time  year month   day dep_time dep_delay arr_time sched_arr_time\n            <int> <int> <int> <int>    <int>     <dbl>    <int>          <int>\n 1            515  2013     1     1      517         2      830            819\n 2            529  2013     1     1      533         4      850            830\n 3            540  2013     1     1      542         2      923            850\n 4            545  2013     1     1      544        -1     1004           1022\n 5            600  2013     1     1      554        -6      812            837\n 6            558  2013     1     1      554        -4      740            728\n 7            600  2013     1     1      555        -5      913            854\n 8            600  2013     1     1      557        -3      709            723\n 9            600  2013     1     1      557        -3      838            846\n10            600  2013     1     1      558        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n\n```{.r .cell-code}\nflights %>% \n  relocate(starts_with(\"arr\"), .before = sched_dep_time)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n    year month   day dep_time arr_time arr_delay sched_dep_time dep_delay\n   <int> <int> <int>    <int>    <int>     <dbl>          <int>     <dbl>\n 1  2013     1     1      517      830        11            515         2\n 2  2013     1     1      533      850        20            529         4\n 3  2013     1     1      542      923        33            540         2\n 4  2013     1     1      544     1004       -18            545        -1\n 5  2013     1     1      554      812       -25            600        -6\n 6  2013     1     1      554      740        12            558        -4\n 7  2013     1     1      555      913        19            600        -5\n 8  2013     1     1      557      709       -14            600        -3\n 9  2013     1     1      557      838        -8            600        -3\n10  2013     1     1      558      753         8            600        -2\n# ℹ 336,766 more rows\n# ℹ 11 more variables: sched_arr_time <int>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n### The pipe {.smaller}\n\n-   Depending on the situation, it may be necessary to combine various\n    modes of data manipulation.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>% # data frame\n  filter(dest == \"IAH\") %>%   # only flights to IAH\n    mutate(speed = distance / air_time * 60) %>%   # create column with speed\n      select(year:day, dep_time, carrier, flight, speed) %>%   # choose variables\n        arrange(desc(speed)) # sort values in descending order\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   <int> <int> <int>    <int> <chr>    <int> <dbl>\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n### Groups\n\n#### `group_by()` and `summarize()`\n\n-   `group_by()` creates a grouped data frame that is organised by a\n    variable of your choice (e.g., \"month\").\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  group_by(month)\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int>\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay <dbl>, carrier <chr>, flight <int>,\n#   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>,\n#   hour <dbl>, minute <dbl>, time_hour <dttm>\n```\n\n\n:::\n\n\n\n</details>\n:::\n\n\n-   Use `summarize()` to create a new data frame with rows for each\n    combination of grouping variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights %>%  \n  group_by(month) %>% \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), # second argument removes missing values\n    n = n() # shows number of rows in this group\n  )\n```\n\n<details><summary>output</summary>\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 12 × 3\n   month delay     n\n   <int> <dbl> <int>\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135\n```\n\n\n:::\n\n\n\n</details>\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}