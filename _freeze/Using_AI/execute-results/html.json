{
  "hash": "b1e1fe93b417219ed5a80340efc6979d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Working with AI\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n  pdf: default\neditor: visual\n---\n\n\n## AI-assisted programming\n\nAI chatbots like [ChatGPT](https://openai.com/index/chatgpt/) or [Claude.ai](https://claude.ai/) are invaluable ressources for\nprogramming-related tasks. In the context of statistical\ncomputing, they can be particularly helpful -- whether it's for data\nfiltering, visualisation or performing complex statistical analyses. This unit will explore some common analytical challenges and demonstrate how AI can be leveraged to address them.\n\n### Data filtering and subsetting\n\nRecall @exr-df-2 from the unit on [data frames](Data_frames.qmd). It\ninvolves subsetting the data frame `data` according to certain criteria.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata <- data.frame(lemma = c(\"start\", \"enjoy\", \"begin\", \"help\"), \n                   frequency = c(418, 139, 337, 281))\n\nprint(data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  lemma frequency\n1 start       418\n2 enjoy       139\n3 begin       337\n4  help       281\n```\n\n\n:::\n:::\n\n\n::: {.callout-note title=\"Prompt\" collapse=\"true\"}\n> **I have this data frame**:\n>\n> data \\<- data.frame(lemma = c(\"start\", \"enjoy\", \"begin\", \"help\"),\n>\n> \\+ frequency = c(418, 139, 337, 281))\n>\n> print(data)\n>\n> lemma frequency\n>\n> 1 start 418\n>\n> 2 enjoy 139\n>\n> 3 begin 337\n>\n> 4 help 281\n>\n> **Show me the code I need for solving these exercises:**\n>\n> Print the following elements by subsetting the data frame `data`\n> accordingly.\n>\n> -   337\n>\n> -   *begin*\n>\n> -   *enjoy*\n>\n> -   *enjoy* 139\n>\n> -   the entire frequency column\n:::\n\n::: {.callout-note title=\"Response (ChatGPT)\" collapse=\"true\"}\nHere is the R code to extract the specified elements from the data\nframe:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Data frame\ndata <- data.frame(lemma = c(\"start\", \"enjoy\", \"begin\", \"help\"), \n                   frequency = c(418, 139, 337, 281))\n\n# 337 (element from the frequency column)\ndata$frequency[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 337\n```\n\n\n:::\n\n```{.r .cell-code}\n# \"begin\" (element from the lemma column)\ndata$lemma[3]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"begin\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# \"enjoy\" (element from the lemma column)\ndata$lemma[2]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"enjoy\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# \"enjoy\" and 139 (row corresponding to \"enjoy\")\ndata[2, ]\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  lemma frequency\n2 enjoy       139\n```\n\n\n:::\n\n```{.r .cell-code}\n# The entire frequency column\ndata$frequency\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 418 139 337 281\n```\n\n\n:::\n:::\n\n\nExplanation:\n\n-   `data$frequency[3]`: Extracts the 3rd element of\n    the `frequency` column.\n\n-   `data$lemma[3]`: Extracts the 3rd element of the `lemma` column.\n\n-   `data$lemma[2]`: Extracts the 2nd element of the `lemma` column.\n\n-   `data[2, ]`: Extracts the entire 2nd row, which\n    contains `\"enjoy\"` and `139`.\n\n-   `data$frequency`: Extracts the entire `frequency` column.\n:::\n\n### Handling error messages\n\n#### Loading files\n\n::: {.callout-note title=\"Prompt\" collapse=\"true\"}\n> **I've downloaded a file `SCOPE_reduced.RDS`, but I can't read it into\n> RStudio. Whenever I run this code, I keep getting an error message.**\n>\n> `SCOPE <- readRDS(\"SCOPE_reduced.RDS\")`\n>\n> Error in gzfile(file, \"rb\") : cannot open the connection In addition:\n> Warning message: In gzfile(file, \"rb\") : cannot open compressed file\n> 'SCOPE_reduced.RDS', probable reason 'No such file or directory'\n>\n> **Is there an easy solution to this problem? I remember I need to click\n> on something and set the working directory somehow.**\n:::\n\n::: {.callout-note title=\"Response (ChatGPT)\" collapse=\"true\"}\nYes, you can resolve this issue easily in RStudio by setting your\nworking directory to the folder where the `SCOPE_reduced.RDS` file is\nlocated. Follow these steps:\n\n#### Solution: Set the Working Directory in RStudio {.unnumbered}\n\n1.  **Navigate to the File Location**:\n\n-   In RStudio, go to the Files pane (usually in the bottom-right\n    corner).\n-   Use the navigation buttons to locate the folder containing your\n    `SCOPE_reduced.RDS` file.\n\n2.  **Set the Working Directory**:\n\n-   Once you're in the correct folder, click the `More` button (three\n    dots or a gear icon, depending on your version).\n-   Select `Set As Working Directory`. This action will update your\n    working directory to the folder where the file is located.\n\n3.  **Run the Code**: After setting the working directory, you can read\n    the file directly:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSCOPE <- readRDS(\"SCOPE_reduced.RDS\")\n```\n:::\n\n\n#### Verify the Working Directory {.unnumbered}\n\nYou can confirm that the working directory is set correctly by running:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngetwd()\n```\n:::\n\n\nThis will print the current working directory in the console. Make sure\nit matches the location of your file.\n\n#### Alternative: Use the RStudio Menu {.unnumbered}\n\nYou can also set the working directory via the RStudio menu:\n\n-   Go to **Session** \\> **Set Working Directory** \\> **Choose\n    Directory**....\n\n-   Select the folder where your file is located and click **OK**.\n\n#### Quick Tip: Avoid Future Issues {.unnumbered}\n\nIf you often work with files in the same directory, you can save time by\nsetting the working directory automatically in your script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"path_to_your_directory\")\n```\n:::\n\n\nReplace `\"path_to_your_directory\"` with the folder's full path. After\ndoing this, your `readRDS()` function should work without issues!\n:::\n\n### Specific questions\n\n::: callout-warning\nThis page is still under construction. More content will be added soon!\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}