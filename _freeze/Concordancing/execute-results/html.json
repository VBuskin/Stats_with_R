{
  "hash": "907a908cb0ff95e1a45d9eb1708253c2",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Concordancing\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## Suggested reading\n\nIn-depth introduction to concordancing with R:\n\n> @schweinberger2024kwics\n\nNaturale Language Processing (NLP) with `quanteda`:\n\n> @quantedapkg\n>\n> [Online reference](http://quanteda.io)\n\nOn corpus-linguistic theory:\n\n> @wulffAnalyzingConcordances2020\n>\n> @lange_corpus_2020\n>\n> @mcenery_corpus-based_2006\n\n## Preparation\n\n::: callout-warning\n### Working directory\n\nIn order for R to be able to recognise the data, it is crucial to set up\nthe working directory correctly.\n\n1.  Make sure your R-script **and** the corpus (e.g., 'ICE-GB') are\n    stored in the **same folder**.\n\n2.  In RStudio, now navigate to `Session` \\> `Set working directory` \\>\n    `To Source File Location`. This ensures that the folder where you\n    have placed your R-script will function as your working directory\n    until you close RStudio again.\n\nTo see your working directory in your files pane, click on `Files` \\>\n`'Blue wheel symbol'` \\> `Go to working directory`.\n:::\n\nIn addition, make sure you have installed `quanteda`. Load it at the\nbeginning of your script:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda) # Package for Natural Language Processing in R\nlibrary(lattice) # for dotplots\n```\n:::\n\n\nTo load a corpus object into R, place it in your working directory and\nread it into your working environment with\n`readRDS()`.[^concordancing-1]\n\n[^concordancing-1]: The `ICE-GB.RDS` file you've been provided with has\n    been pre-processed and saved in this specific format for practical\n    reasons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load corpus from directory\nICE_GB <- readRDS(\"ICE_GB.RDS\")\n```\n:::\n\n\nIf you encounter any error messages at this stage, ensure you followed\nsteps 1 and 2 in the callout box above.\n\n## Concordancing\n\nA core task in corpus-linguistic research involves finding occurrences\nof a single word or multi-word sequence in the corpus. Lange & Leuckert\n[-@lange_corpus_2020: 55, emphasis in original] explain that specialised\nsoftware typically \"provide\\[s\\] the surrounding context as well as the\nname of the file in which the word could be identified.\" Inspecting the\ncontext is particularly important in comparative research, as it may be\nindicative of distinct usage patterns.\n\n\n::: {.cell}\n\n:::\n\n\n### Simple queries\n\nTo obtain such a **keyword in context (KWIC)** in R**,** we use the\n`kwic()` function. We supply the corpus as well as the keyword we're\ninterested in:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery1 <- kwic(ICE_GB, \"eat\")\n```\n:::\n\n\nThe output in `query1` contains **concordance lines** that list all\noccurrences of the keyword, including the document, context to the left,\nthe keyword itself, and the context to the right. The final column\nreiterates our search expression.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(query1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nKeyword-in-context with 6 matches.                                                            \n  [ICE_GB/S1A-006.txt, 785]           So I' d rather | eat |\n [ICE_GB/S1A-009.txt, 1198]              I must <, > | eat |\n  [ICE_GB/S1A-010.txt, 958]         to <, > actually | eat |\n  [ICE_GB/S1A-018.txt, 455] order one first and then | eat |\n  [ICE_GB/S1A-018.txt, 498]  A > The bargain hunting | eat |\n [ICE_GB/S1A-023.txt, 1853]       B > Oh name please | eat |\n                            \n beforehand just to avoid uh\n them < ICE-GB:S1A-009#71:  \n it for one' s              \n it and then sort of        \n < ICE-GB:S1A-018#29: 1     \n something <,, >            \n```\n\n\n:::\n:::\n\n\nFor a full screen display of the KWIC data frame, try `View()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nView(query1)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-006.txt </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:left;\"> So I ' d rather </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> beforehand just to avoid uh </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-009.txt </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:left;\"> I must &lt; , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> them &lt; ICE-GB:S1A-009 #71 : </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-010.txt </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:left;\"> to &lt; , &gt; actually </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it for one ' s </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:left;\"> order one first and then </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it and then sort of </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:left;\"> A &gt; The bargain hunting </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> &lt; ICE-GB:S1A-018 #29 : 1 </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-023.txt </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:left;\"> B &gt; Oh name please </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> something &lt; , , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Multi-word queries\n\nIf the search expression exceeds a single word, we need to mark it as a\nmulti-word sequence by means of the `phrase()` function. For instance,\nif we were interested in the pattern *eat a*, we'd have to adjust the\ncode as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery2 <- kwic(ICE_GB, phrase(\"eat a\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(query2)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-059.txt </td>\n   <td style=\"text-align:right;\"> 2230 </td>\n   <td style=\"text-align:right;\"> 2231 </td>\n   <td style=\"text-align:left;\"> 1 : B &gt; I </td>\n   <td style=\"text-align:left;\"> eat a </td>\n   <td style=\"text-align:left;\"> &lt; , &gt; very balanced </td>\n   <td style=\"text-align:left;\"> eat a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/W2B-014.txt </td>\n   <td style=\"text-align:right;\"> 1045 </td>\n   <td style=\"text-align:right;\"> 1046 </td>\n   <td style=\"text-align:left;\"> : 1 &gt; We can't </td>\n   <td style=\"text-align:left;\"> eat a </td>\n   <td style=\"text-align:left;\"> lot of Welsh or Scottish </td>\n   <td style=\"text-align:left;\"> eat a </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/W2B-022.txt </td>\n   <td style=\"text-align:right;\"> 589 </td>\n   <td style=\"text-align:right;\"> 590 </td>\n   <td style=\"text-align:left;\"> have few labour-saving devices , </td>\n   <td style=\"text-align:left;\"> eat a </td>\n   <td style=\"text-align:left;\"> diet low in protein , </td>\n   <td style=\"text-align:left;\"> eat a </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Multiple simultaneous queries\n\nA very powerful advantage of `quanteda` over traditional corpus software\nis that we can query a corpus for a multitude of keywords **at the same\ntime**. Say, we need our output to contain hits for *eat*, *drink* as\nwell as *sleep*. Instead of a single keyword, we supply a character\n[vector](Vectors_Factors.qmd) containing the strings of interest.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery3 <- kwic(ICE_GB, c(\"eat\", \"drink\", \"sleep\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nView(query3)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-006.txt </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:left;\"> So I ' d rather </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> beforehand just to avoid uh </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-009.txt </td>\n   <td style=\"text-align:right;\"> 869 </td>\n   <td style=\"text-align:right;\"> 869 </td>\n   <td style=\"text-align:left;\"> : A &gt; Do you </td>\n   <td style=\"text-align:left;\"> drink </td>\n   <td style=\"text-align:left;\"> quite a lot of it </td>\n   <td style=\"text-align:left;\"> drink </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-009.txt </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:left;\"> I must &lt; , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> them &lt; ICE-GB:S1A-009 #71 : </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-010.txt </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:left;\"> to &lt; , &gt; actually </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it for one ' s </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-014.txt </td>\n   <td style=\"text-align:right;\"> 3262 </td>\n   <td style=\"text-align:right;\"> 3262 </td>\n   <td style=\"text-align:left;\"> you were advised not to </td>\n   <td style=\"text-align:left;\"> drink </td>\n   <td style=\"text-align:left;\"> water in Leningrad because they </td>\n   <td style=\"text-align:left;\"> drink </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-016.txt </td>\n   <td style=\"text-align:right;\"> 3290 </td>\n   <td style=\"text-align:right;\"> 3290 </td>\n   <td style=\"text-align:left;\"> &gt; I couldn't I couldn't </td>\n   <td style=\"text-align:left;\"> sleep </td>\n   <td style=\"text-align:left;\"> if I didn't read &lt; </td>\n   <td style=\"text-align:left;\"> sleep </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Window size\n\nSome studies require more detailed examination of the preceding or\nfollowing context of the keyword. We can easily adjust the `window` size\nto suit our needs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery4 <- kwic(ICE_GB, \"eat\", window = 20) \n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-006.txt </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:left;\"> #49 : 1 : A &gt; Yeah &lt; ICE-GB:S1A-006 #50 : 1 : A &gt; So I ' d rather </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> beforehand just to avoid uh &lt; , , &gt; any problems there &lt; ICE-GB:S1A-006 #51 : 1 : B &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-009.txt </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:left;\"> &lt; , &gt; in in the summer &lt; ICE-GB:S1A-009 #70 : 1 : A &gt; I must &lt; , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> them &lt; ICE-GB:S1A-009 #71 : 1 : A &gt; Yes &lt; ICE-GB:S1A-009 #72 : 1 : B &gt; You ought </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-010.txt </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:left;\"> 1 : B &gt; You know I mean it would seem to be squandering it to &lt; , &gt; actually </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it for one ' s own enjoyment &lt; , , &gt; &lt; ICE-GB:S1A-010 #49 : 1 : A &gt; Mm </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:left;\"> s so &lt; ICE-GB:S1A-018 #27 : 1 : A &gt; What you should do is order one first and then </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it and then sort of carry on from there &lt; laughter &gt; &lt; , &gt; by which time you wouldn't </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:left;\"> second anyway so &lt; laugh &gt; &lt; , &gt; &lt; ICE-GB:S1A-018 #28 : 1 : A &gt; The bargain hunting </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> &lt; ICE-GB:S1A-018 #29 : 1 : B &gt; So all right what did I have &lt; ICE-GB:S1A-018 #30 : 1 </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-023.txt </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:left;\"> &gt; I can't bear it &lt; , , &gt; &lt; ICE-GB:S1A-023 #121 : 1 : B &gt; Oh name please </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> something &lt; , , &gt; &lt; ICE-GB:S1A-023 #122 : 1 : A &gt; Oh actually Dad asked me if &lt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Saving your output\n\nYou can store your results in a spreadsheet file just as described in\nthe unit on [importing and exporting data](Importing_exporting.qmd).\n\n-   **Microsoft Excel (**.xlsx**)**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(writexl) # required for writing files to MS Excel\n\nwrite_xlsx(query2, \"myresults1.xlsx\")\n```\n:::\n\n\n-   **LibreOffice** (.csv)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite.csv(query2, \"myresults1.csv\")\n```\n:::\n\n\nAs soon as you have annotated your data, you can load .xlsx files back\ninto R with `read_xlsx()` from the `readxl` package and .csv files using\nthe Base R function `read.csv()`.\n\n## Characterising the output\n\nRecall our initial query of the *eat*, whose output we stored in\n`query1`:\n\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-006.txt </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:right;\"> 785 </td>\n   <td style=\"text-align:left;\"> So I ' d rather </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> beforehand just to avoid uh </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-009.txt </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:right;\"> 1198 </td>\n   <td style=\"text-align:left;\"> I must &lt; , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> them &lt; ICE-GB:S1A-009 #71 : </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-010.txt </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:right;\"> 958 </td>\n   <td style=\"text-align:left;\"> to &lt; , &gt; actually </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it for one ' s </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:right;\"> 455 </td>\n   <td style=\"text-align:left;\"> order one first and then </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> it and then sort of </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-018.txt </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:right;\"> 498 </td>\n   <td style=\"text-align:left;\"> A &gt; The bargain hunting </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> &lt; ICE-GB:S1A-018 #29 : 1 </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-023.txt </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:right;\"> 1853 </td>\n   <td style=\"text-align:left;\"> B &gt; Oh name please </td>\n   <td style=\"text-align:left;\"> eat </td>\n   <td style=\"text-align:left;\"> something &lt; , , &gt; </td>\n   <td style=\"text-align:left;\"> eat </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nFirst, we may be interested in obtaining some general information on our\nresults, such as ...\n\n-   ... how many **tokens** (= individual hits) does the query return?\n\nThe `nrow()` function counts the number of rows in a data frame — these\nalways correspond to the number of **observations** in our sample (here:\n53).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnrow(query1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 53\n```\n\n\n:::\n:::\n\n\n-   ... how many **types** (= distinct hits) does the query return?\n\nApparently, there are 52 counts of *eat* in lower case and 1 in upper\ncase. Their sum corresponds to our 53 observations in total.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(query1$keyword)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\neat Eat \n 52   1 \n```\n\n\n:::\n:::\n\n\n-   ... how is the keyword distributed across corpus files?\n\nThis question relates to the notion of **dispersion**: Is a keyword\nspread relatively evenly across corpus files or does it only occur in\nspecific ones?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery_distrib <- table(query1$docname, query1$keyword)\n\n# Create a simple dot plot\ndotplot(query_distrib, auto.key = list(columns = 2, title = \"Tokens\", cex.title = 1))\n```\n\n::: {.cell-output-display}\n![](Concordancing_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n\nIt seems that *eat* occurs at least once in most text categories (both\nspoken and written), but seems to be much more common in face-to-face\nconversations (S1A). This is not surprising: It is certainly more common\nto discuss food in a casual chat with friends than in an academic essay\n(unless, of course, its main subject matter is food). Dispersion\nmeasures can thus be viewed as indicators of **contextual preferences**\nassociated with lexemes or more grammatical patterns.\n\n::: {.callout-tip title=\"Advanced: More on dispersion\" collapse=\"true\"}\nThe empirical study of dispersion has attracted a lot of attention in\nrecent years [@sonningEvaluationKeynessMetrics2024;\n@griesNewApproachKey2021, @griesAnalyzingDispersion2020]. A reason for\nthis is the necessity of finding a dispersion measure that is minimally\ncorrelated with token frequency. One such measure is the\nKullback-Leibler divergence $KLD$, which comes from the field of\ninformation theory and is closely related to entropy.\n\nMathematically, $KLD$ measures the difference between two [probability\ndistributions](Distributions.qmd) $p$ and $q$.\n\n$$ KLD(p \\parallel q) = \\sum\\limits_{x \\in X} p(x) \\log \\frac{p(x)}{q(x)}\n$$ {#eq-kld}\n\nLet $f$ denote the overall frequency of a keyword in the corpus, $v$ its\nfrequency in each corpus part, $s$ the sizes of each corpus part (as\nfractions) and $n$ the total number of corpus parts. We thus compare the\nposterior (= \"actual\") distribution of keywords $\\frac{v_i}{f}$ for\n$i = 1, ..., n$ with their prior distribution, which assumes all words\nare spread evenly across corpus parts (hence the division by $s_i$).\n\n$$ KLD = \\sum\\limits_{i=1}^n \\frac{v_i}{f} \\times \\log_2\\left({\\frac{v_i}{f} \\times \\frac{1}{s_i}}\\right)\n$$ {#eq-kld-corpus}\n\nIn R, let's calculate the dispersion of the verbs *eat*, *drink*, and\n*sleep* from `query3`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Let's filter out the upper-case variants:\nquery3_reduced <- query3[query3$keyword %in% c(\"eat\", \"drink\", \"sleep\"),]\ntable(query3_reduced$keyword)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\ndrink   eat sleep \n   48    52    41 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Extract text categories\nquery_registers <- separate_wider_delim(query3_reduced, cols = docname, delim = \"-\", names = c(\"Text_category\", \"File_number\"))\n\n# Get separate data frames for each verb\neat <- filter(query_registers, keyword == \"eat\")\ndrink <- filter(query_registers, keyword == \"drink\")\nsleep <- filter(query_registers, keyword == \"sleep\")\n\n## Get frequency distribution across files\nv_eat <- table(eat$Text_category)\nv_drink <- table(drink$Text_category)\nv_sleep <- table(sleep$Text_category)\n\n## Get total frequencies\nf_eat <- nrow(eat)\nf_drink <- nrow(drink)\nf_sleep <- nrow(sleep)\n\n# The next step is a little trickier. First we need to find out how many distinct corpus parts there are in the ICE corpus.\n\n## Check ICE-corpus structure and convert to data frame\nICE_GB_str <- as.data.frame(summary(ICE_GB))\n\n## Separate files from text categores\nICE_GB_texts <- separate_wider_delim(ICE_GB_str, cols = Var1, delim = \"-\", names = c(\"Text_category\", \"File\"))\n\n## Get number of distinct text categories\nn <- length(unique(ICE_GB_texts$Text_category))\n\n## Get proportions of distinct text categories (s)\ns <- table(ICE_GB_texts$Text_category)/sum(table(ICE_GB_texts$Text_category))\n\n## Unfortunately not all of these corpus parts are represented in our queries. We need to correct the proportions in s for the missing ones!\n\n## Store unique ICE text categories \nICE_unique_texts <- unique(ICE_GB_texts$Text_category)\n\n## Make sure only those text proportions are included where the keywords actually occur\ns_eat <- s[match(names(v_eat), ICE_unique_texts)]\ns_drink <- s[match(names(v_drink), ICE_unique_texts)]\ns_sleep <- s[match(names(v_sleep), ICE_unique_texts)]\n\n# Compute KLD for each verb\nkld_eat <- sum(v_eat/f_eat * log2(v_eat/f_eat * 1/s_eat)); kld_eat\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.6747268\n```\n\n\n:::\n\n```{.r .cell-code}\nkld_drink <- sum(v_drink/f_drink * log2(v_drink/f_drink * 1/s_drink)); kld_drink\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.8463608\n```\n\n\n:::\n\n```{.r .cell-code}\nkld_sleep <- sum(v_sleep/f_sleep * log2(v_sleep/f_sleep * 1/s_sleep)); kld_sleep\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.7047421\n```\n\n\n:::\n\n```{.r .cell-code}\n# Plot\nkld_df <- data.frame(kld_eat, kld_drink, kld_sleep)\n\nbarplot(as.numeric(kld_df), names.arg = names(kld_df), col = \"steelblue\",\n        xlab = \"Variable\", ylab = \"KLD Value (= deviance from even distribution)\", main = \"Dispersion of 'eat', 'drink', and 'sleep'\")\n```\n\n::: {.cell-output-display}\n![](Concordancing_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nThe plot indicates that *drink* is the most unevenly distributed verb\nout of the three considered (high KDL $\\sim$ low dispersion), whereas\n*eat* appears to be slightly more evenly distributed across corpus\nfiles. The verb *sleep* assumes an intermediary position.\n:::\n\n## \"I need a proper user interface\": Some alternatives\n\nThere is a wide variety of concordancing software available, both free\nand paid. Among the most popular options are AntConc\n[@anthony_antconc_2020] and SketchEngine [@Kilgarriff2004]. However, as\nSchweinberger [-@schweinberger2024kwics] notes, the exact processes these tools use to\ngenerate output are not always fully transparent, making them something\nof a \"black box.\" In contrast, programming languages like R or Python\nallow researchers to document each step of their analysis clearly,\nproviding full transparency from start to finish.\n\nThe following apps attempt to reconcile the need for an intuitive user\ninterface with transparent data handling. The full source code is\ndocumented in the respective GitHub repositories.\n\n-   [`QuantedaApp`](https://github.com/VBuskin/quanteda_app) is an interface for the R package `quanteda`\n    [@quantedapkg].\n\n-   [`PyConc`](https://github.com/VBuskin/PyConc) is an interface for the Python package `spaCy` [@spacy2].\n",
    "supporting": [
      "Concordancing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}