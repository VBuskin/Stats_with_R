{
  "hash": "41ce934a29f540ea6896a78f70a7a416",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Querying a corpus\"\nauthor: Vladimir Buskin\nformat:\n  html:\n    self-contained: false\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## Introduction\n\nThis section offers a short introduction to corpus queries in R. Our\ngoal will be to obtain data on the genitive alternation in British\nEnglish. To this end, we will rely on the British component of the\nInternational Corpus of English (ICE-GB).\n\n## Preparation\n\n### Directory structure\n\nIn order for R to be able to recognise the data, it is crucial to set up\nthe working directory correctly.\n\n1.  Make sure your R-script **and** the corpus (e.g., 'ICE-GB') are\n    stored in the **same folder**.\n2.  In RStudio, now navigate to `Session` \\> `Set working directory` \\>\n    `To Source File Location`. This ensures that the folder where you\n    have placed your R-script will function as your working directory\n    until you close RStudio again. To see your working directory in your\n    files pane, click on `Files` \\> `'Blue wheel symbol'` \\>\n    `Go to working directory`.\n\n### Installing and loading packages (move to earlier session)\n\nPackages expand the basic functionality of R by providing numerous\nquality-of-life improvements that not only considerably simplify common\ndata wrangling tasks but which also provide frameworks for\nstate-of-the-art methods for statistical analysis and natural language\nprocessing (NLP).\n\nIn order to install a package, you navigate to `Packages` \\> `Install`\nand verify that the pop-up window says\n`Install from: Repository (CRAN)`. You can now type in the name of the\npackage you would like to install under `Packages`.\n\n**Task**: Install the `tidyverse` and `quanteda` packages!\n\nOnce the installation has been completed, you can proceed to load the\nlibraries using the code below. You can ignore the warning messages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(quanteda)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nRemember that you will have to reload these libraries whenever you start\na new R session (i.e., open RStudio).\n\n## Loading the corpus\n\nAfter specifying the working directory and loading the libraries we will\nneed, we can read in the corpus files into a corpus object in R.\n\nFirst, simply copy-paste the following code chunk at the beginning of\nyour R-script. Once you run it, it will load the function `read_GB()`\ninto R's working memory (it should now appear in the `Environment`\ntab!). This function will automatically handle the entire reading-in\nprocess.\n\nTo now get all corpus files into R, all we have to do is call the\nfunction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nICE_GB <- readRDS(\"ICE_GB.RDS\")\n```\n:::\n\n\nIf you encounter error messages, make sure you followed steps 1 and 2\nabove.\n\n## Concordancing\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(quanteda)\nlibrary(tidyverse)\n\n# Load corpus\nICE_GB <- readRDS(\"ICE_GB.RDS\")\n```\n:::\n\n\n#### Basic use\n\n-   Concordances\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Query the corpus\nquery1 <- kwic(ICE_GB, pattern = \"provid(e|es|ing|ed)\", valuetype = \"regex\")\n\nquery1 %>%\n  as_tibble() %>% \n  count(keyword)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 Ã— 2\n   keyword          n\n   <chr>        <int>\n 1 Provided         5\n 2 Provident        1\n 3 Providing        1\n 4 provide        165\n 5 provided       118\n 6 providential     1\n 7 provider         1\n 8 providers        3\n 9 provides        72\n10 providing       52\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print first six lines to console\n#head(as_tibble(kwic_provide))\n\n# View output in separate window\n#View(kwic_provide)\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n`````{=html}\n<table class=\" lightable-classic\" style=\"font-family: Cambria; width: auto !important; margin-left: auto; margin-right: auto;\">\n <thead>\n  <tr>\n   <th style=\"text-align:left;\"> docname </th>\n   <th style=\"text-align:right;\"> from </th>\n   <th style=\"text-align:right;\"> to </th>\n   <th style=\"text-align:left;\"> pre </th>\n   <th style=\"text-align:left;\"> keyword </th>\n   <th style=\"text-align:left;\"> post </th>\n   <th style=\"text-align:left;\"> pattern </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-003.txt </td>\n   <td style=\"text-align:right;\"> 1994 </td>\n   <td style=\"text-align:right;\"> 1994 </td>\n   <td style=\"text-align:left;\"> &gt; Uhm or whatever they </td>\n   <td style=\"text-align:left;\"> provide </td>\n   <td style=\"text-align:left;\"> &lt; ICE-GB:S1A-003 #82 : 1 </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-010.txt </td>\n   <td style=\"text-align:right;\"> 827 </td>\n   <td style=\"text-align:right;\"> 827 </td>\n   <td style=\"text-align:left;\"> quandary about what to to </td>\n   <td style=\"text-align:left;\"> provide </td>\n   <td style=\"text-align:left;\"> &lt; , , &gt; &lt; </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-023.txt </td>\n   <td style=\"text-align:right;\"> 3230 </td>\n   <td style=\"text-align:right;\"> 3230 </td>\n   <td style=\"text-align:left;\"> from there is Gospel Oak </td>\n   <td style=\"text-align:left;\"> provided </td>\n   <td style=\"text-align:left;\"> you know the time of </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-024.txt </td>\n   <td style=\"text-align:right;\"> 1851 </td>\n   <td style=\"text-align:right;\"> 1851 </td>\n   <td style=\"text-align:left;\"> what L S E is </td>\n   <td style=\"text-align:left;\"> providing </td>\n   <td style=\"text-align:left;\"> &lt; ICE-GB:S1A-024 #92 : 1 </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-031.txt </td>\n   <td style=\"text-align:right;\"> 998 </td>\n   <td style=\"text-align:right;\"> 998 </td>\n   <td style=\"text-align:left;\"> her own &lt; , &gt; </td>\n   <td style=\"text-align:left;\"> providing </td>\n   <td style=\"text-align:left;\"> her &lt; ICE-GB:S1A-031 #47 : </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;\"> ICE_GB/S1A-038.txt </td>\n   <td style=\"text-align:right;\"> 730 </td>\n   <td style=\"text-align:right;\"> 730 </td>\n   <td style=\"text-align:left;\"> this as viewing banking as </td>\n   <td style=\"text-align:left;\"> providing </td>\n   <td style=\"text-align:left;\"> &lt; , , &gt; &lt; </td>\n   <td style=\"text-align:left;\"> provid(e|es|ing|ed) </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n#### Increase search window\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Query the corpus\nkwic_provide2 <- kwic(tokens(ICE_GB_corpus),\n                     pattern = \"provide\",\n                     window = 20) # choose window size\n\n# View output in separate window\n#View(kwic_provide)\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n#### Regular expressions\n\n**Regular expressions** (or 'regex') help us find more complex patterns\nin strings of text. Suppose we are interested in finding all\ninflectional forms of the lemma PROVIDE in a corpus, i.e., *provide,\nprovides, providing* and *provided*. Insteading of searching for all\nforms individually, we can construct a regular expression of the form\n\n$$\n\\text{provide(s | ing | ed)?}\n$$ which can be read as 'Match the sequence of letters \\<provide\\> as\nwell as when it is optionally followed by the letters \\<s\\> or \\<ing\\>\nor \\<ed\\>'. Notice how optionality is signified by the '?' operator and\nalternatives by '\\|'.\n\nTo activate regular expression in a KWIC query, simply set the\n`valuetype` argument to `\"regex\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Query the corpus\nkwic_provide3 <- kwic(ICE_GB,\n                     pattern = \"provide(s|ing|ed)?\",\n                     valuetype = \"regex\", # query format\n                     window = 20)\n\n                     \n\n# View output in separate window\n#View(kwic_provide)\n```\n:::\n\n\nThe number of hits has more than doubled. However, upon closer\ninspection, we'll notice a number of false positives (e.g.,\n*providential*).\n\n\n::: {.cell}\n\n:::\n\n\n### RegEx: A Cheatsheet\n\n### Example usage\n\n### Exporting the results\n",
    "supporting": [
      "Concordancing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}