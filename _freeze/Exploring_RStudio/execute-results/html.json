{
  "hash": "48208dc03ac496fb9e01feebc4a98090",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploring RStudio\"\nauthor:\n  name: \"Vladimir Buskin\" \n  orcid: \"0009-0005-5824-1012\"\n  affiliation: \n    name: \"Catholic University of Eichst√§tt-Ingolstadt\"\n    department: \"English Language and Linguistics\"\nformat:\n  html:\n    self-contained: true\n    theme: default\n    toc: true\n    number-sections: true\n    slide-number: true\n    incremental: false\n    slide-level: 3\n    scrollable: true\n    \neditor: visual\n---\n\n\n## The RStudio interface\n\nOnce you've opened RStudio, you will see several empty panes similar to\nthis:\n\n![](RStudio.png){fig-align=\"center\"}\n\n### Console\n\nLet's focus on the **console** window on the left. This is where we can\ndirectly communicate with R by entering \"code\". The way this code is\nwritten follows certain arbitrary conventions -- just like natural\nlanguages such as English or German. Here is an example in the R\nprogramming language:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(\"Hello world!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world!\"\n```\n\n\n:::\n:::\n\n\nEntering this command into your console and pressing ENTER will display\nthe sentence \"Hello world!\" in a new line.\n\nAs we can see, anything that R should understand as a simple sequence of\nletters or words must be enclosed by quotation marks `\"...\"`. Anything\ninside them will be interpreted as a so-called **string**. Their\ncounterpart are **numbers** or **integers**, as illustrated here:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 + 2 - 1\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nNaturally, you can use R for more sophisticated computations:\n\n-   $2 + (3 \\times 3)$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    2 + (3 * 3)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 11\n    ```\n    \n    \n    :::\n    :::\n\n\n-   $\\sqrt{9}$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    sqrt(9)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3\n    ```\n    \n    \n    :::\n    :::\n\n\n-   $\\frac{16}{2^3}$\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    16 / 2 ^ 3\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2\n    ```\n    \n    \n    :::\n    :::\n\n\n### Working environment\n\nWhile it is certainly useful to print text or numbers to your console,\nit may sometimes make more sense to (at least temporally) store them\nsomewhere, so you can re-use them later. In fact, R gives us a way of\nstoring data in virtual, container-like objects: **variables**. We can\nassign strings or numbers to a variable by using the assignment operator\n`<-`.\n\nWhen you run the commands below, you will (hopefully) notice two items\npopping up in your **Environment/Workspace** tab in the top right\ncorner.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngreeting <- \"Hello world!\"\n\nquick_math <- 2 + 2 - 1\n```\n:::\n\n\nIf we now want to display the content in the console, we can simply\napply the `print()` function to the variable:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprint(greeting)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello world!\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(quick_math)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3\n```\n\n\n:::\n:::\n\n\nWe can also embed variables in other statements. For example, let's take\nthe content of `quick_math` and multiply it with 2.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhard_math <- quick_math * 2\n\nprint(hard_math)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 6\n```\n\n\n:::\n:::\n\n\n### R Scripts\n\nWorking with the console has a very plain, yet important disadvantage:\nOnce we close RStudio, the console is wiped clean, erasing everything\nwe've typed into it during our precious R session.\n\nThe remedy for this nuisance are **scripts**. Essentially, a script is\nthe programmer's equivalent of a Word document: It allows you to save\nall the code you've written to a file, which you can seamlessly continue\nworking on the next time you open it.\n\n::: callout-info\nTo **create a new R script** you can either go to:\n\n-   \"File\" $\\rightarrow$ \"New\" $\\rightarrow$ \"R Script\" or ...\n\n-   click on the icon with the + sign and select \"R Script\" ...\n\n-   or simply press Ctrl+Shift+N (MacOS: Cmd+Shift+N)\n:::\n\nDon't forget to save your script with Ctrl+S (Cmd+S)! It is good\npractice to save your files regularly.\n",
    "supporting": [
      "Exploring_RStudio_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}