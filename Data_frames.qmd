---
title: "Data frames"
author: Vladimir Buskin
format:
  html:
    self-contained: true
    theme: default
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 3
    scrollable: true
    
editor: visual
---

## Recommended reading

> @winter_statistics_2020: Chapter 1.10-1.16

## Word frequencies II

Recall our corpus-linguistic data from the previous unit:

| Lemma | Frequency |
|-------|-----------|
| start | 418       |
| enjoy | 139       |
| begin | 337       |
| help  | 281       |

We thought of the columns as one-dimensional, indexed lists of elements:

```{r}
lemma <- c("start", "enjoy", "begin", "help")

frequency <- c(418, 139, 337, 281)
```

Actually, R allows to combine these two vectors into something that
resembles a real spreadsheet. To this end, we need to apply the
`data.frame()` to two vectors of our choice.

```{r}
data <- data.frame(lemma, frequency)

print(data)
```

The variable `data` is no longer a vector, but a **data frame** (often
abbreviated as 'df'). Once again, each element carries its own label and
can, therefore, be accessed or manipulated.

## Some technical details {#sec-df}

Since we now have two dimensions, the subsetting notation in square
brackets `[ ]` has to reflect that. This is the general pattern:

$$ df[row, column] $$ Following this logic, we can get the element in
the first row of the first column like so:

```{r}
data[1,1]
```

If we, however, need the entire first row, we simply omit the column
part. Note that the comma `,` still needs to be present!

```{r}
data[1,]
```

Subsetting by columns is interesting. We can either use the explicit
notation with square brackets or the **column operator** `$`:

```{r}
data[,1]

data$lemma
```

## Exercises

1.  Recreate the barplot from the previous unit by subsetting the `data`
    variable accordingly.

2.  
