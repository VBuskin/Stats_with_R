---
title: "Data frames"
author: Vladimir Buskin
format:
  html:
    self-contained: true
    theme: default
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 3
    scrollable: true
    
editor: visual
---

## Preparation

::: callout-tip
## Script

You can find the full R script associated with this unit
[here](https://osf.io/xh962).
:::

## Recommended reading

> @winter_statistics_2020: Chapter 1.10-1.16

Suggested video tutorial:

> [Using the Data Frame in
> R](https://www.youtube.com/watch?v=9f2g7RN5N0I) (DataCamp, 5min)
>
> [Learn How to Subset, Extend & Sort Data Frames in
> R](https://www.youtube.com/watch?v=Nh6tSD4i4qs) (DataCamp, 7min)

## Word frequencies II

Recall our corpus-linguistic data from the previous unit:

| Lemma | Frequency |
|-------|-----------|
| start | 418       |
| enjoy | 139       |
| begin | 337       |
| help  | 281       |

We thought of the columns as one-dimensional, indexed lists of elements:

```{r}
lemma <- c("start", "enjoy", "begin", "help")

frequency <- c(418, 139, 337, 281)
```

Actually, R allows us to combine these two vectors into something that
resembles a real spreadsheet. To this end, we apply the `data.frame()`
function to two vectors of our choice.

```{r}
data <- data.frame(lemma, frequency)

print(data)
```

### Essential R concepts {#sec-df}

The variable `data` is no longer a vector, but a **data frame** (often
abbreviated as 'df'). Once again, each element carries its own label and
can, therefore, be accessed or manipulated.

Since we now have two dimensions, the **subsetting** notation in square
brackets `[ ]` has to reflect that. This is the general pattern:

$$ df[row, column]
$$ {#eq-df}

Say, we're looking for the element at the intersection of the first row
and first column. Applying the pattern above, we can access it like so:

```{r}
data[1,1]
```

But what if we need the entire first row? We simply omit the column
part. Note, however, that the comma `,` needs to remain:

```{r}
data[1,]
```

Subsetting by columns is interesting. We can either use the square
bracket notation `[ ]` or the **column operator** `$`:

```{r}
data[,1]

data$lemma
```

### Filtering

Not all the information contained in a data frame is always relevant for
our research. In those cases, it's important to subset the rows and
columns according to certain criteria.

Assume we only need those observations where the lemma frequencies are
greater than 300. We can obtain those by specifying

1.  the data frame,
2.  the column of interest and
3.  the condition to apply.

You can read the code below as

> Take the data frame `data` and subset it according to the column
> `data$frequency`. Show me those rows where the values of
> `data$frequency` are greater than 300.

```{r}
data[data$frequency > 300, ]
```

What if we wanted to filter by `lemma` instead? Let's say we're looking
for frequency data on the verbs *start* and *help*.

This will give us the row associated with *start*:

```{r}
data[data$lemma == "start", ]
```

Combining multiple statements requires a **logical operator**. Here
we're using `|` , which corresponds to a logical 'or' (disjunction).

```{r}
data[data$lemma == "start" | data$lemma == "help", ]
```

::: callout-caution
### Why do we need to use "or" (\|) and not "and" (&)?

The idea of combining statements somewhat naturally suggests a
conjunction, which could be achieved via `&`. How come R doesn't return
anything if we do it that way?

```{r}
data[data$lemma == "start" & data$lemma == "help", ]
```
:::

### I don't like the way this looks â€“ is there another way to filter in R?

Yes, absolutely. The subsections below demonstrate a few popular
alternatives. In the end, the exact way you filter doesn't really
matter, so long as you (as well as the people who have to work with your
script) can understand what you're trying to achieve. Always consider
adding comments to your filtering operations!

#### `subset()`

Almost every subsetting operation we perform with square brackets can
also be performed using the `subset()` function. Here are some
expressions that are synonymous to the ones above:

```{r}
subset(data, frequency > 300)
subset(data, lemma == "start" | lemma == "help")
```

#### `tidyverse`

The `tidyverse`-ecosystem is a collection of packages specifically
designed for handling typical data science tasks as comfortably and
elegantly as possible, supplying countless helper functions for data
manipulation, transformation and visualisation. Installation
instructions are provided in @sec-libraries.

It offers some appealing alternatives to the Base R subsetting
functions. Let's generate a tidyverse-style data frame, the **tibble**:

```{r}
library(tidyverse)

data2 <- tibble(
  lemma = c("start", "enjoy", "begin", "help"),
  frequency = c(418, 139, 337, 281)
)

print(data2)
```

We can single out certain columns by using `select()`:

```{r}
select(data2, lemma)
```

It is very easy to filter the data frame according to certain criteria:

```{r}
filter(data2, frequency > 300)

filter(data2, lemma == "start" | lemma == "help")

```

A extensive guide to the main `tidyverse` functions is provided in
Chapter 3 of the free eBook [R For Data Science (2nd
edition)](https://r4ds.hadley.nz).

## Exercises

::: callout-tip
## Solutions

You can find the solutions to the exercises
[here](https://osf.io/vpjfu).
:::

::: {#exr-df-1}
Recreate the barplot from the previous unit by subsetting the `data`
variable accordingly.
:::

::: {#exr-df-2}
Print the following elements by subsetting the data frame `data`
accordingly.

-   337

-   *begin*

-   *enjoy*

-   *enjoy* 139

-   the entire frequency column
:::

::: {#exr-df-3}
Extension of @exr-v-3. Verify that the following verbs are represented
in the lemma column: *enjoy*, *hit*, *find*, *begin*. If they are in the
data frame, print their frequency information.
:::

::: {#exr-df-4}
Extension of @exr-v-4. Use `which()` to find the rows where the
frequency is greater than 200, and then print the lemma and frequency of
only those rows.
:::
