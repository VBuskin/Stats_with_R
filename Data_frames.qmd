---
title: "Data frames"
author: Vladimir Buskin
format:
  html:
    self-contained: true
    theme: default
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 3
    scrollable: true
    
editor: visual
---

## Recommended reading

> @winter_statistics_2020: Chapter 1.10-1.16

Suggested video tutorial:

> [Using the Data Frame in
> R](https://www.youtube.com/watch?v=9f2g7RN5N0I) (DataCamp, 5min)
>
> [Learn How to Subset, Extend & Sort Data Frames in
> R](https://www.youtube.com/watch?v=Nh6tSD4i4qs) (DataCamp, 7min)

## Word frequencies II

Recall our corpus-linguistic data from the previous unit:

| Lemma | Frequency |
|-------|-----------|
| start | 418       |
| enjoy | 139       |
| begin | 337       |
| help  | 281       |

We thought of the columns as one-dimensional, indexed lists of elements:

```{r}
lemma <- c("start", "enjoy", "begin", "help")

frequency <- c(418, 139, 337, 281)
```

Actually, R allows to combine these two vectors into something that
resembles a real spreadsheet. To this end, we need to apply the
`data.frame()` to two vectors of our choice.

```{r}
data <- data.frame(lemma, frequency)

print(data)
```

## Essential R concepts {#sec-df}

The variable `data` is no longer a vector, but a **data frame** (often
abbreviated as 'df'). Once again, each element carries its own label and
can, therefore, be accessed or manipulated.

Since we now have two dimensions, the **subsetting** notation in square
brackets `[ ]` has to reflect that. This is the general pattern:

$$ df[row, column] $$Following this logic, we can get the element in the
first row of the first column like so:

```{r}
data[1,1]
```

If we, however, need the entire first row, we simply omit the column
part. The comma `,` needs to stay there:

```{r}
data[1,]
```

Subsetting by columns is interesting. We can either use the explicit
notation with square brackets or the **column operator** `$`:

```{r}
data[,1]

data$lemma
```

## Handling data frames `tidyverse`-style

The `tidyverse`-ecosystem is a collection of packages specifically
designed for handling typical data science tasks as comfortably and
elegantly as possible, supplying countless helper functions for data
manipulation, transformation and visualisation.

It offers some appealing alternatives to the Base R subsetting
functions. Let's generate a tidyverse-style data frame, the **tibble**:

```{r}
library(tidyverse)

data2 <- tibble(
  lemma = c("start", "enjoy", "begin", "help"),
  frequency = c(418, 139, 337, 281)
)

print(data2)
```

We can single out certain columns by using `select()`:

```{r}
select(data2, lemma)

```

It is very easy to filter the data frame according to certain criteria:

```{r}
filter(data2, lemma == "start")

filter(data2, frequency > 150)

```

A extensive guide to the main tidyverse functions is provided in Chapter
3 of the free eBook [R For Data Science (2nd
edition)](https://r4ds.hadley.nz).

## Exercises

1.  Recreate the barplot from the previous unit by subsetting the `data`
    variable accordingly.

2.  
