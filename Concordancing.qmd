---
title: "Concordancing"
author: Vladimir Buskin
format:
  html:
    self-contained: true
    theme: default
    toc: true
    number-sections: true
    slide-number: true
    incremental: false
    slide-level: 3
    scrollable: true
    
editor: visual
---

## Using the `QuantedaApp`

Installation and usage instructions are available in this [GitHub
repository](https://github.com/VBuskin/quanteda_app).

## Using the `quanteda` package in R

### Preparation

::: callout-warning
### Working directory

In order for R to be able to recognise the data, it is crucial to set up
the working directory correctly.

1.  Make sure your R-script **and** the corpus (e.g., 'ICE-GB') are
    stored in the **same folder**.

2.  In RStudio, now navigate to `Session` \> `Set working directory` \>
    `To Source File Location`. This ensures that the folder where you
    have placed your R-script will function as your working directory
    until you close RStudio again.

To see your working directory in your files pane, click on `Files` \>
`'Blue wheel symbol'` \> `Go to working directory`.
:::

### Loading the corpus

To load a corpus object into R, place it in your working directory and
perform read it into your working environment with `readRDS()`. The
ICE-GB.RDS file you've been provided with has been pre-processed and
saved in this specific format for practical reasons.

```{r, echo = TRUE, eval = T}


ICE_GB <- readRDS("ICE_GB.RDS")

```

If you encounter any error messages, make sure you followed steps 1 and
2 in the box above.

### Concordancing

In order to perform concordances in R, we need to load the packages
below.

```{r}
# Load libraries
library(quanteda)
library(tidyverse)
```

Next, we use the `kwic()` function, which requires a corpus object and a
search expression. Let's supply both:

```{r, echo = T, output = T}
# Query the corpus
query1 <- kwic(ICE_GB, phrase("eat"))
```

Print the first few lines of our results with `head()`:

```{r, echo = T, output = T}
head(query1)
```

```{r, echo = F}
library(kableExtra)

query1 %>% 
  head() %>% 
  kbl() %>% 
  kable_classic(full_width = F, html_font = "Cambria")

```

For a full screen display of the data frame, try `View()`:

```{r, eval = FALSE}
View(query1)
```

### Some basic statistics

How many tokens (= individual hits) does our query return?

```{r}
nrow(query1) # Token number corresponds to the number of rows in the data frame
```

How many types (= distinct hits) does our query return?

```{r}
table(query1$keyword)
```

How is the keyword distributed across corpus files?

```{r}
query_distrib <- table(query1$docname, query1$keyword)

head(query_distrib, n = 10)
```

### Window size

Some studies require careful examination of the preceding or following
context of the keyword. We can easily adjust the `window` size to suit
our needs:

```{r, eval = TRUE}
query2 <- kwic(ICE_GB, phrase("eat"), window = 20) 

```

```{r, echo = FALSE, eval = TRUE}

query2 %>% 
  head() %>% 
  kbl() %>% 
  kable_classic(full_width = F, html_font = "Cambria")

```

### Saving your output

You can store your results in a spreadsheet file just as described in
`Introduction to R > Import/export data`.

-   **Microsoft Excel (**.xlsx**)**

```{r, output = F, eval = F}
library(writexl)

write_xlsx(query2, "myresults1.xlsx")


```

-   **LibreOffice** (.csv)

```{r, output = F, eval = F}

write.csv(query2, "myresults1.csv")

```

As soon as you have annotated your data, you can load .xlsx files back
into R with `read_xlsx()` from the `readxl` package and .csv files using
the Base R function `read.csv()`.
