[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative methods in corpus linguistics",
    "section": "",
    "text": "Preface\nThis collection of handouts provides a hands-on introduction to data analysis and statistical methods in quantitative corpus linguistics with R.\nIt is geared primarily towards students attending the classes Language Variation (BA) and Statistics for Linguistics (MA) as well as those currently working on their BA/MA/PhD theses in empirical linguistics.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Vectors & Factors.html",
    "href": "Vectors & Factors.html",
    "title": "1  Data Structures in R",
    "section": "",
    "text": "2 Variables",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#suggested-reading",
    "href": "Vectors & Factors.html#suggested-reading",
    "title": "1  Data Structures in R",
    "section": "1.1 Suggested reading",
    "text": "1.1 Suggested reading\n\nGries (2013: Chapter 2)\nJames et al. (2021: Chapter 2.3)\nWinter (2019: Chapter 1)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#functions-and-arguments",
    "href": "Vectors & Factors.html#functions-and-arguments",
    "title": "1  Data Structures in R",
    "section": "1.2 Functions and arguments",
    "text": "1.2 Functions and arguments\n\nDescriptionSome useful functions\n\n\n\n\nTo call or invoke a built-in function in R you write the name of the function and then enter its argument values enclosed in parentheses and separated by commas.\n\n\n\n\nPattern: \\(\\text{function}(\\text{argument}_1, \\text{argument}_2, ..., \\text{argument}_n)\\) which translates to ‘apply the function to argument\\(_1\\), argument\\(_2\\), …, argument\\(_n\\)’.\n\n\n\n\nExample: The seq() function produces arithmetic sequences:\n\n\nseq(from = 1, to = 9, by = 2)\n\n[1] 1 3 5 7 9\n\n\n\n\n\nEvery function has a default order for the arguments. If you provide arguments in this order, then they do not need to be named.\n\n\nseq(1, 9, 2)\n\n[1] 1 3 5 7 9\n\n\n\n\n\n\n\nc() to combine numbers or character strings into a vector\n\n\n# Concatenate the numbers 1, 2 and 3 into vector \"a\"\na &lt;- c(1, 2, 3)\n\n# Print \"a\"\na\n\n[1] 1 2 3\n\n\n\n\n\nclass() and str() to inspect the structure of objects\n\n\nclass(a)\n\n[1] \"numeric\"\n\n\n\nstr(a)\n\n num [1:3] 1 2 3\n\n\n\n\n\nrm() to remove objects from the working environment\n\n\nrm(a)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#data-frames-in-base-r",
    "href": "Vectors & Factors.html#data-frames-in-base-r",
    "title": "1  Data Structures in R",
    "section": "5.1 Data frames in Base R",
    "text": "5.1 Data frames in Base R\n\nGenerating data framesEditing data frames\n\n\n\n\nData frames are comparable to spreadsheets. They can be built by combining multiple vectors and applying the data.frame() function to them.\n\n\n# Define the columns\nparticipant &lt;-  c(\"louis\", \"paula\", \"vincenzo\")\nscore &lt;- c(67, 85, 32)\n\n# Combine the columns into a data frame\nmydf &lt;- data.frame(participant, score)\nmydf\n\n  participant score\n1       louis    67\n2       paula    85\n3    vincenzo    32\n\n\n\n\n\nYou can check the structure of the data frame with str()\n\n\nstr(mydf)\n\n'data.frame':   3 obs. of  2 variables:\n $ participant: chr  \"louis\" \"paula\" \"vincenzo\"\n $ score      : num  67 85 32\n\n\n\n\n\n\n\nThe individual columns of a data frame can be accessed using the $ symbol:\n\n\nmydf$participant\n\n[1] \"louis\"    \"paula\"    \"vincenzo\"\n\n\n\n\n\nJust like with vectors, it is possible to access specific elements of a data frame.\n\n\n# First row\nmydf[1,]\n\n# Second column\nmydf[,2]\n\n# First two rows\nmydf[1:2,]\n\n# First column, second entry\nmydf[,1][2]\n\n\n\n\nExtract those cells for which a certain property applies:\n\n\n# Extract the row for Vincenzo\nmydf[mydf$participant == 'vincenzo',]\n\n# Further subset this data frame to obtain the score only\nmydf[mydf$participant == 'vincenzo',]$score",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#data-frames-in-the-tidyverse",
    "href": "Vectors & Factors.html#data-frames-in-the-tidyverse",
    "title": "1  Data Structures in R",
    "section": "5.2 Data frames in the tidyverse",
    "text": "5.2 Data frames in the tidyverse\n\nInstalling and loading the tidyverse\n\n\n#install.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nInstall the dataset\n\n\n#install.packages(\"nycflights13\")\nlibrary(nycflights13)\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n5.2.1 Rows\n\n5.2.1.1 filter()\n\nShow flights where the departure was delayed by more than 120 minutes\n\n\nflights %&gt;% # specify data frame\n  filter(dep_delay &gt; 120) # apply filter\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nFlights that departed on January 1\n\n\nflights %&gt;% \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n5.2.1.2 arrange()\n\nSpecify the order of the columns\n\n\nflights %&gt;% \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nOrder the values of the columns in descending order\n\n\nflights %&gt;%  \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n5.2.2 Columns\n\n5.2.2.1 mutate()\n\nAdd new columns to the data frame\n\n\nflights %&gt;%  \n  mutate(\n    gain = dep_delay - arr_delay, # add gain column\n    speed = distance / air_time * 60, # add speed column\n    .before = 1 # add new columns to the left of the df\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n5.2.2.2 select()\n\n\n5.2.2.3 rename()\n\n\n5.2.2.4 relocate()\n\n\n\n5.2.3 The pipe\n\nDepending on your goal, it may be necessary to combine the various mode of data manipulation\n\n\nflights %&gt;% # data frame\n  filter(dest == \"IAH\") |&gt;  # only flights to IAH\n  mutate(speed = distance / air_time * 60) |&gt;  # create column with speed\n  select(year:day, dep_time, carrier, flight, speed) |&gt;  # choose variables\n  arrange(desc(speed)) # sort values in descending order\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n\n5.2.4 Groups\n\n5.2.4.1 group_by() and summarize()\n\nState that all further operations should be organised by “month”\n\n\nflights %&gt;%  \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nCompute the average delay per month\n\n\nflights %&gt;%  \n  group_by(month) %&gt;% \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), # second argument removes missing values\n    n = n() # shows number of rows in this group\n  )\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "2  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "3  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary</span>"
    ]
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "References"
    ]
  }
]