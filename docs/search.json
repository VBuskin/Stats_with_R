[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Quantitative methods in corpus linguistics",
    "section": "",
    "text": "Preface\nThis collection of handouts provides a hands-on introduction to data analysis and statistical methods in quantitative corpus linguistics with R.\nIt is geared primarily towards students attending the classes Language Variation (BA) and Statistics for Linguistics (MA) as well as those currently working on their BA/MA/PhD theses in empirical linguistics.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#suggested-reading",
    "href": "Vectors & Factors.html#suggested-reading",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.1 Suggested reading",
    "text": "1.1 Suggested reading\n\nGries (2013: Chapter 2)\nJames et al. (2021: Chapter 2.3)\nWinter (2019: Chapter 1)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#functions-and-arguments",
    "href": "Vectors & Factors.html#functions-and-arguments",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.2 Functions and arguments",
    "text": "1.2 Functions and arguments\n\nDescriptionSome useful functions\n\n\n\n\nTo call or invoke a built-in function in R you write the name of the function and then enter its argument values enclosed in parentheses and separated by commas.\n\n\n\n\nPattern: \\(\\text{function}(\\text{argument}_1, \\text{argument}_2, ..., \\text{argument}_n)\\) which translates to ‘apply the function to argument\\(_1\\), argument\\(_2\\), …, argument\\(_n\\)’.\n\n\n\n\nExample: The seq() function produces arithmetic sequences:\n\n\nseq(from = 1, to = 9, by = 2)\n\n[1] 1 3 5 7 9\n\n\n\n\n\nEvery function has a default order for the arguments. If you provide arguments in this order, then they do not need to be named.\n\n\nseq(1, 9, 2)\n\n[1] 1 3 5 7 9\n\n\n\n\n\n\n\nc() to combine numbers or character strings into a vector\n\n\n# Concatenate the numbers 1, 2 and 3 into vector \"a\"\na &lt;- c(1, 2, 3)\n\n# Print \"a\"\na\n\n[1] 1 2 3\n\n\n\n\n\nclass() and str() to inspect the structure of objects\n\n\nclass(a)\n\n[1] \"numeric\"\n\n\n\nstr(a)\n\n num [1:3] 1 2 3\n\n\n\n\n\nrm() to remove objects from the working environment\n\n\nrm(a)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#variables",
    "href": "Vectors & Factors.html#variables",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.3 Variables",
    "text": "1.3 Variables\n\n\nVariables are similar to folders: they can be filled with information, inspected, and changed.\n\n\n\n\nTo assign a value to a variable we use the assignment command &lt;-.\n\n\n# Assign the value 100 to the variable x\nx &lt;- 100\n\n# Print the content of x\nprint(x)\n\n[1] 100\n\n\n\n# or simply:\nx\n\n[1] 100\n\n\n\n\n\nThe variables currently stored are displayed in the Environment tab. You can also list them in the console with ls().",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#vectors",
    "href": "Vectors & Factors.html#vectors",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.4 Vectors",
    "text": "1.4 Vectors\n\nGenerating vectorsEditing vectors\n\n\n\n\nIn R, vectors are indexed lists of variables. They can be generated with the functions c(), seq() and rep().\n\n\n# Define a character vector \"vehicles\"\nvehicles &lt;- c(\"car\", \"truck\", \"bus\")\n\n# Print the content of vehicles\nvehicles\n\n[1] \"car\"   \"truck\" \"bus\"  \n\n\n\n\n\nWe can access the i-th element of a vector x using the notation x[i].\n\n\n# Access the first element of vehicles\nvehicles[1]\n\n[1] \"car\"\n\n\n\n\n\n\n\nView content of one or several indexed positions\n\n\n# View the first two elements\nvehicles[1:2]\n\n[1] \"car\"   \"truck\"\n\n\n\n\n\nWhere in the vector does a specific property apply?\n\n\nvehicles == \"bus\"\n\n[1] FALSE FALSE  TRUE\n\n\n\n\n\nDo multiple properties apply?\n\n\nc(\"truck\", \"bus\") %in% vehicles\n\n[1] TRUE TRUE\n\n\n\n\n\nWhat positions do certain elements occupy in a vector?\n\n\nmatch(c(\"truck\", \"bus\"), vehicles)\n\n[1] 2 3",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#factors",
    "href": "Vectors & Factors.html#factors",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.5 Factors",
    "text": "1.5 Factors\n\nGenerating factorsEditing factors\n\n\n\n\nFirst, generate a vector such as\n\n\narticles &lt;- c(\"a\", \"the\", \"a\", \"a\", \"a\", \"the\", \"the\")\n\n\n\n\nConvert the vector to a factor using the factor() function:\n\n\narticles &lt;-  factor(articles)\n\n\n\n\nInspect the contents of the factor\n\n\narticles\n\n[1] a   the a   a   a   the the\nLevels: a the\n\n\n\n\n\nCheck the levels of “articles”\n\n\nlevels(articles)\n\n[1] \"a\"   \"the\"\n\n\n\n\n\n\n\nChange the reference level of a factor:\n\n\n# Prior to changing the reference level\nlevels(articles)\n\n[1] \"a\"   \"the\"\n\n# Changing the reference level\narticles &lt;- relevel(articles, ref = \"the\")\n\nlevels(articles)\n\n[1] \"the\" \"a\"  \n\n\n\n\n\nChange a factor level:\n\n\n# Change level \"the\" to \"def_art\" (definite article)\nlevels(articles)[1] &lt;- \"def_art\"\n\n# Change level \"a\" to \"indef_art\" (indefinite article)\nlevels(articles)[2] &lt;- \"indef_art\"\n\n\n# Print \"articles\"\nprint(articles) # the original levels \"the\" and \"a\" have been replaced\n\n[1] indef_art def_art   indef_art indef_art indef_art def_art   def_art  \nLevels: def_art indef_art\n\n\n\n\n\nChange factor back to a character/numeric vector using as.character()or as.numeric():\n\n\narticles &lt;- as.character(articles)\n\nstr(articles)\n\n chr [1:7] \"indef_art\" \"def_art\" \"indef_art\" \"indef_art\" \"indef_art\" ...",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Vectors & Factors.html#data-frames",
    "href": "Vectors & Factors.html#data-frames",
    "title": "1  Data Structures in R: A cheatsheet",
    "section": "1.6 Data frames",
    "text": "1.6 Data frames\n\n1.6.1 Data frames in Base R\n\nGenerating data framesEditing data frames\n\n\n\n\nData frames are comparable to spreadsheets. They can be built by combining multiple vectors and applying the data.frame() function to them.\n\n\n# Define the columns\nparticipant &lt;-  c(\"louis\", \"paula\", \"vincenzo\")\nscore &lt;- c(67, 85, 32)\n\n# Combine the columns into a data frame\nmydf &lt;- data.frame(participant, score)\nmydf\n\n  participant score\n1       louis    67\n2       paula    85\n3    vincenzo    32\n\n\n\n\n\nYou can check the structure of the data frame with str()\n\n\nstr(mydf)\n\n'data.frame':   3 obs. of  2 variables:\n $ participant: chr  \"louis\" \"paula\" \"vincenzo\"\n $ score      : num  67 85 32\n\n\n\n\n\n\n\nThe individual columns of a data frame can be accessed using the $ symbol:\n\n\nmydf$participant\n\n[1] \"louis\"    \"paula\"    \"vincenzo\"\n\n\n\n\n\nJust like with vectors, it is possible to access specific elements of a data frame.\n\n\n# First row\nmydf[1,]\n\n# Second column\nmydf[,2]\n\n# First two rows\nmydf[1:2,]\n\n# First column, second entry\nmydf[,1][2]\n\n\n\n\nExtract those cells for which a certain property applies:\n\n\n# Extract the row for Vincenzo\nmydf[mydf$participant == 'vincenzo',]\n\n# Further subset this data frame to obtain the score only\nmydf[mydf$participant == 'vincenzo',]$score\n\n\n\n\n\n\n\n1.6.2 Data frames in the tidyverse\n\nInstalling and loading the tidyverse\n\n\n#install.packages(\"tidyverse\")\nlibrary(\"tidyverse\")\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.5.0     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\nInstall the dataset\n\n\n#install.packages(\"nycflights13\")\nlibrary(nycflights13)\nflights\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n1.6.2.1 Rows\n\n1.6.2.1.1 filter()\n\nShow flights where the departure was delayed by more than 120 minutes\n\n\nflights %&gt;% # specify data frame\n  filter(dep_delay &gt; 120) # apply filter\n\n# A tibble: 9,723 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      848           1835       853     1001           1950\n 2  2013     1     1      957            733       144     1056            853\n 3  2013     1     1     1114            900       134     1447           1222\n 4  2013     1     1     1540           1338       122     2020           1825\n 5  2013     1     1     1815           1325       290     2120           1542\n 6  2013     1     1     1842           1422       260     1958           1535\n 7  2013     1     1     1856           1645       131     2212           2005\n 8  2013     1     1     1934           1725       129     2126           1855\n 9  2013     1     1     1938           1703       155     2109           1823\n10  2013     1     1     1942           1705       157     2124           1830\n# ℹ 9,713 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nFlights that departed on January 1\n\n\nflights %&gt;% \n  filter(month == 1 & day == 1)\n\n# A tibble: 842 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 832 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n1.6.2.1.2 arrange()\n\nSpecify the order of the columns\n\n\nflights %&gt;% \n  arrange(year, month, day, dep_time)\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nOrder the values of the columns in descending order\n\n\nflights %&gt;%  \n  arrange(desc(dep_delay))\n\n# A tibble: 336,776 × 19\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     9      641            900      1301     1242           1530\n 2  2013     6    15     1432           1935      1137     1607           2120\n 3  2013     1    10     1121           1635      1126     1239           1810\n 4  2013     9    20     1139           1845      1014     1457           2210\n 5  2013     7    22      845           1600      1005     1044           1815\n 6  2013     4    10     1100           1900       960     1342           2211\n 7  2013     3    17     2321            810       911      135           1020\n 8  2013     6    27      959           1900       899     1236           2226\n 9  2013     7    22     2257            759       898      121           1026\n10  2013    12     5      756           1700       896     1058           2020\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n\n1.6.2.2 Columns\n\n1.6.2.2.1 mutate()\n\nAdd new columns to the data frame\n\n\nflights %&gt;%  \n  mutate(\n    gain = dep_delay - arr_delay, # add gain column\n    speed = distance / air_time * 60, # add speed column\n    .before = 1 # add new columns to the left of the df\n  )\n\n# A tibble: 336,776 × 21\n    gain speed  year month   day dep_time sched_dep_time dep_delay arr_time\n   &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;\n 1    -9  370.  2013     1     1      517            515         2      830\n 2   -16  374.  2013     1     1      533            529         4      850\n 3   -31  408.  2013     1     1      542            540         2      923\n 4    17  517.  2013     1     1      544            545        -1     1004\n 5    19  394.  2013     1     1      554            600        -6      812\n 6   -16  288.  2013     1     1      554            558        -4      740\n 7   -24  404.  2013     1     1      555            600        -5      913\n 8    11  259.  2013     1     1      557            600        -3      709\n 9     5  405.  2013     1     1      557            600        -3      838\n10   -10  319.  2013     1     1      558            600        -2      753\n# ℹ 336,766 more rows\n# ℹ 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,\n#   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,\n#   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\n\n1.6.2.2.2 select()\n\n\n1.6.2.2.3 rename()\n\n\n1.6.2.2.4 relocate()\n\n\n\n1.6.2.3 The pipeline\n\nDepending on your goal, it may be necessary to combine the various mode of data manipulation\n\n\nflights %&gt;% # data frame\n  filter(dest == \"IAH\") |&gt;  # only flights to IAH\n  mutate(speed = distance / air_time * 60) |&gt;  # create column with speed\n  select(year:day, dep_time, carrier, flight, speed) |&gt;  # choose variables\n  arrange(desc(speed)) # sort values in descending order\n\n# A tibble: 7,198 × 7\n    year month   day dep_time carrier flight speed\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt; &lt;chr&gt;    &lt;int&gt; &lt;dbl&gt;\n 1  2013     7     9      707 UA         226  522.\n 2  2013     8    27     1850 UA        1128  521.\n 3  2013     8    28      902 UA        1711  519.\n 4  2013     8    28     2122 UA        1022  519.\n 5  2013     6    11     1628 UA        1178  515.\n 6  2013     8    27     1017 UA         333  515.\n 7  2013     8    27     1205 UA        1421  515.\n 8  2013     8    27     1758 UA         302  515.\n 9  2013     9    27      521 UA         252  515.\n10  2013     8    28      625 UA         559  515.\n# ℹ 7,188 more rows\n\n\n\n\n1.6.2.4 Groups\n\n1.6.2.4.1 group_by() and summarize()\n\nState that all further operations should be organised by “month”\n\n\nflights %&gt;%  \n  group_by(month)\n\n# A tibble: 336,776 × 19\n# Groups:   month [12]\n    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n   &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n 1  2013     1     1      517            515         2      830            819\n 2  2013     1     1      533            529         4      850            830\n 3  2013     1     1      542            540         2      923            850\n 4  2013     1     1      544            545        -1     1004           1022\n 5  2013     1     1      554            600        -6      812            837\n 6  2013     1     1      554            558        -4      740            728\n 7  2013     1     1      555            600        -5      913            854\n 8  2013     1     1      557            600        -3      709            723\n 9  2013     1     1      557            600        -3      838            846\n10  2013     1     1      558            600        -2      753            745\n# ℹ 336,766 more rows\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;\n\n\n\nCompute the average delay per month\n\n\nflights %&gt;%  \n  group_by(month) %&gt;% \n  summarize(\n    delay = mean(dep_delay, na.rm = TRUE), # second argument removes missing values\n    n = n() # shows number of rows in this group\n  )\n\n# A tibble: 12 × 3\n   month delay     n\n   &lt;int&gt; &lt;dbl&gt; &lt;int&gt;\n 1     1 10.0  27004\n 2     2 10.8  24951\n 3     3 13.2  28834\n 4     4 13.9  28330\n 5     5 13.0  28796\n 6     6 20.8  28243\n 7     7 21.7  29425\n 8     8 12.6  29327\n 9     9  6.72 27574\n10    10  6.24 28889\n11    11  5.44 27268\n12    12 16.6  28135",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Data Structures in R: A cheatsheet</span>"
    ]
  },
  {
    "objectID": "Variables.html#preparation",
    "href": "Variables.html#preparation",
    "title": "2  Understanding and visualising variables",
    "section": "2.1 Preparation",
    "text": "2.1 Preparation\nPlease download the file “Paquot_Larsson_2020_data.xlsx” (Paquot and Larsson 2020)1 and store it in your working directory.\n\n# Libraries\nlibrary(\"nycflights13\")\nlibrary(\"readxl\")\nlibrary(\"tidyverse\")\nlibrary(\"ggthemes\")\n\n# Load data\ncl.order &lt;- read_xlsx(\"Paquot_Larsson_2020_data.xlsx\")\n\n# Inspect data\nstr(cl.order)\n\ntibble [403 × 8] (S3: tbl_df/tbl/data.frame)\n $ CASE       : num [1:403] 4777 1698 953 1681 4055 ...\n $ ORDER      : chr [1:403] \"sc-mc\" \"mc-sc\" \"sc-mc\" \"mc-sc\" ...\n $ SUBORDTYPE : chr [1:403] \"temp\" \"temp\" \"temp\" \"temp\" ...\n $ LEN_MC     : num [1:403] 4 7 12 6 9 9 9 4 6 4 ...\n $ LEN_SC     : num [1:403] 10 6 7 15 5 5 12 2 24 11 ...\n $ LENGTH_DIFF: num [1:403] -6 1 5 -9 4 4 -3 2 -18 -7 ...\n $ CONJ       : chr [1:403] \"als/when\" \"als/when\" \"als/when\" \"als/when\" ...\n $ MORETHAN2CL: chr [1:403] \"no\" \"no\" \"yes\" \"no\" ...\n\nhead(cl.order)\n\n# A tibble: 6 × 8\n   CASE ORDER SUBORDTYPE LEN_MC LEN_SC LENGTH_DIFF CONJ     MORETHAN2CL\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;       &lt;dbl&gt; &lt;chr&gt;    &lt;chr&gt;      \n1  4777 sc-mc temp            4     10          -6 als/when no         \n2  1698 mc-sc temp            7      6           1 als/when no         \n3   953 sc-mc temp           12      7           5 als/when yes        \n4  1681 mc-sc temp            6     15          -9 als/when no         \n5  4055 sc-mc temp            9      5           4 als/when yes        \n6   967 sc-mc temp            9      5           4 als/when yes",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding and visualising variables</span>"
    ]
  },
  {
    "objectID": "Variables.html#types-of-variables",
    "href": "Variables.html#types-of-variables",
    "title": "2  Understanding and visualising variables",
    "section": "2.2 Types of variables",
    "text": "2.2 Types of variables\nThe concept of the variable allows us to quantify various aspects of our observations.\n\nnominal/categorical: These variables have a limited number of levels which cannot be ordered in a meaningful way. For instance, it does not matter which value of SUBORDTYPE or MORETHAN2CL comes first or last:\n\nunique(cl.order$SUBORDTYPE)\n\n[1] \"temp\" \"caus\"\n\nunique(cl.order$MORETHAN2CL)\n\n[1] \"no\"  \"yes\"\n\n\nordinal: Such variables can be ordered, but the intervals between their individuals values are not meaningful. Heumann (2022: 6) provides a pertinent example:\n“[T]he satisfaction with a product (unsatisfied–satisfied–very satisfied) is an ordinal variable because the values this variable can take can be ordered but the differences between ‘unsatisfied–satisfied’ and ‘satisfied–very satisfied’ cannot be compared in a numerical way”.\nIn the case of interval-scaled variables, the differences between the values can be interpreted, but their ratios must be treated with caution. A temperature of 4°C is 6 degrees warmer than -2°C; however, this does not imply that 4°C is three times warmer than -2°C. This is because the temperature scale has no true zero point; 0°C simply signifies another point on the scale and not the absence of temperature altogether.\nRatio-scaled variables allow both a meaningful interpretation of the differences between their values and (!) of the ratios between them. Within the context of clause length, LENGTH_DIFF values such as 4 and 8 not only suggest that the latter is four units greater than the former but also that their ratio \\(\\frac{8}{4} = 2\\) is a valid way to describe the relationship between these values. Here a LENGTH_DIFF of 0 can be clearly viewed as the absence of a length difference.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding and visualising variables</span>"
    ]
  },
  {
    "objectID": "Variables.html#introduction-to-ggplot2",
    "href": "Variables.html#introduction-to-ggplot2",
    "title": "2  Understanding and visualising variables",
    "section": "2.3 Introduction to ggplot2",
    "text": "2.3 Introduction to ggplot2\n\n2.3.1 Building a ggplot\n\nA ggplot requires at minimum three elements: (1) a data frame, (2) axis labels, and (3) a plotting option (also known as “geom”). We combine them with the + sign.\n\n\n# Supply data frame\nggplot(data = cl.order,\n      # Supply axis labels\n        mapping = aes(x = LEN_MC, y = LEN_SC)) +\n      # Set plotting option (here: scatterplot)\n        geom_point()\n\n\n\n\n\n\n\n\n\n\n2.3.2 Adding layers\n\nVisualise a third variable using the colors argument as part of the aes() function.\n\n\nggplot(data = cl.order,\n        mapping = aes(x = LEN_MC, \n                      y = LEN_SC,\n                      color = ORDER)) +\n        geom_point()\n\n\n\n\n\n\n\n\n\nAdjust further visual parameters as you see fit:\n\n\nggplot(data = cl.order,\n  mapping = aes(x = LEN_MC, y = LEN_SC)) +\n1  geom_point(aes(color = ORDER, shape = SUBORDTYPE)) +\n  labs(\n2    title = \"Length of main and subordinate clauses\",\n    subtitle = \"Dimensions for different ordering types\",\n    x = \"Length of main clause\",\n    y = \"Length of subordinate clause\",\n    color = \"ORDER\",\n    shape = \"SUBORDTYPE\"\n  ) +\n3  theme_classic()\n\n\n1\n\nMap variables to axes, colours and shapes.\n\n2\n\nAdd a legend with a title, subtitle and axis labels.\n\n3\n\nChange the overall theme of the plot.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding and visualising variables</span>"
    ]
  },
  {
    "objectID": "Variables.html#visualising-distributions",
    "href": "Variables.html#visualising-distributions",
    "title": "2  Understanding and visualising variables",
    "section": "2.4 Visualising distributions",
    "text": "2.4 Visualising distributions\n\n2.4.1 A categorical variable\n\nBarplot with geom_bar()\n\n\nggplot(cl.order, aes(x = ORDER)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n\n2.4.2 A numerical variable\n\nHistogram with geom_histogram()\nDensitiy plot with …\n\n\nggplot(cl.order, aes(x = LEN_MC)) +\n  geom_histogram(binwidth = 1)\n\n\n\n\n\n\n\n\n\nDensity plot with geom_density()\n\n\nggplot(cl.order, aes(x = LEN_MC)) +\n  geom_density(linewidth = 0.5)\n\n\n\n\n\n\n\n\n\n\n2.4.3 A numerical and categorical variable\n\nBoxplot with geom_boxplot()\n\n\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_boxplot()\n\n\n\n\n\n\n\n\n\nDensitiy plot using the optional arguments color and/or fill\n\n\nggplot(cl.order, aes(x = LEN_MC, fill = ORDER)) +\n  geom_density(alpha = 0.5)\n\n\n\n\n\n\n\n\n\nA barplot with geom_col()\n\n\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_col(aes(x = ORDER, y = LEN_MC))\n\n\n\n\n\n\n\n\n\n\n2.4.4 Two categorical variables\n\nBarplots with the fill argument\n\n\nggplot(cl.order, aes(x = ORDER, fill = SUBORDTYPE)) +\n  geom_bar(position = \"dodge\")\n\n\n\n\n\n\n\n\n\n\n2.4.5 Two numerical variables\n\nScatterplot with geom_point() (cf. 1.1.1)\n\n\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\nLine plot with geom_line(); the example is based on the flights data set from the previous session)\n\n\nnycflights13::flights %&gt;%  \n  group_by(hour = sched_dep_time %/% 100) %&gt;% \n  summarize(prop_cancelled = mean(is.na(dep_time)), n = n()) %&gt;%  \n  filter(hour &gt; 1) -&gt; flights2\n  \n  ggplot(flights2, aes(x = hour, y = prop_cancelled)) +\n  geom_line(color = \"grey50\") + \n  geom_point()\n\n\n\n\n\n\n\n\n\n\n2.4.6 Multivariate plots\n\nAdvanced scatterplot with four variables: LEN_MC (x), LEN_SC (y), ORDER (colour) and SUBORDTYPE (shape)\n\n\n# 4 variables\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point(aes(color = ORDER, shape = SUBORDTYPE))\n\n\n\n\n\n\n\n\n\nFacets\n\n\n# 5 variables\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n  geom_point(aes(color = ORDER, shape = SUBORDTYPE)) +\n  facet_wrap(~MORETHAN2CL)\n\n\n\n\n\n\n\n\n\n\n2.4.7 Saving your plot\n\nSave last plot displayed in the viewer to your working directory:\n\n\nggplot(cl.order, aes(x = LEN_MC, y = LEN_SC)) +\n          geom_point()\n\nggsave(\"figures/clause_length_plot.png\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding and visualising variables</span>"
    ]
  },
  {
    "objectID": "Variables.html#references",
    "href": "Variables.html#references",
    "title": "2  Understanding and visualising variables",
    "section": "2.5 References",
    "text": "2.5 References\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Understanding and visualising variables</span>"
    ]
  },
  {
    "objectID": "Summary_statistics.html#measures-of-central-tendency",
    "href": "Summary_statistics.html#measures-of-central-tendency",
    "title": "3  Summary statistics: Theory and practice",
    "section": "3.1 Measures of central tendency",
    "text": "3.1 Measures of central tendency\n\n3.1.1 The mean\n\nA useful summary statistic is the arithmetic mean \\(\\bar{x}\\) (cf. Heumann, Schomaker, and Shalabh 2022: 38). Consider a variable \\(X\\) with observations \\(x_1, x_2, ..., x_n\\) from a sample of size \\(n\\). The sample mean then corresponds to\n\\[\n\\bar{x}= \\frac{x_1 + x_2 + ... + x_n}{n} \\\\ = \\frac{1}{n}\\sum_{i=1}^n{x_i}.\n\\]\n\nIn R, we can obtain the average value of a numeric vector with the mean() function.\n\n# Using mean()\nmean(cl.order$LEN_MC)\n\n[1] 9.265509\n\n# or by hand:\nmean &lt;- 1/length(cl.order$LEN_MC) * sum(cl.order$LEN_MC)\n\nVisualisation:\n\nHistogramDensity plot\n\n\n\n# Plot distribution of LEN_MC\ncl.length.hist &lt;- ggplot(cl.order, aes(x = LEN_MC)) +\n                  geom_histogram(binwidth = 2)\n\ncl.length.hist +\n  # Add mean\n  geom_vline(aes(xintercept = mean(LEN_MC)),\n             color = \"steelblue\",\n             linewidth = 1) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n# Plot distribution of LEN_MC\ncl.length.dens &lt;- ggplot(cl.order, aes(x = LEN_MC)) +\n                  geom_density()\n\ncl.length.dens +\n  # Add mean\n  geom_vline(aes(xintercept = mean(LEN_MC)),\n             color = \"steelblue\",\n             linewidth = 1) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.2 The median\n\nThe median() function computes the “the halfway point of the data (50% of the data are above the median; 50% of the data are below” (Winter 2020: 58)\n\\[\n\\begin{equation}\n\\tilde{x}_{0.5} =\n\\begin{cases}\nx_{((n+1)/2)} & \\text{if } n \\text{ is odd.} \\\\\n\\frac{1}{2}(x_{n/2}+x_{(n/2+1)}) & \\text{if } n \\text{ is even.}\n\\end{cases}\n\\end{equation}\n\\]\n\n\n# Using median()\nmedian(cl.order$LEN_MC)\n\n[1] 8\n\n# or by hand:\nsample_sorted &lt;- sort(cl.order$LEN_MC) # sort values in ascending order\n\nn &lt;- length(cl.order$LEN_MC) # sample size is 403 (odd number!)\n\nmedian &lt;- sample_sorted[(n + 1) %/% 2] # compute median\n\nVisualisation:\n\nHistogramDensity plot\n\n\n\ncl.length.hist +\n  # Add mean\n  geom_vline(aes(xintercept = mean(LEN_MC)), color = \"steelblue\", linewidth = 1) +\n  # Add median\n  geom_vline(aes(xintercept = median(LEN_MC)), color = \"red\", linewidth = 1) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\ncl.length.dens +\n  # Add mean\n  geom_vline(aes(xintercept = mean(LEN_MC)), color = \"steelblue\", linewidth = 1) +\n  # Add median\n  geom_vline(aes(xintercept = median(LEN_MC)), color = \"red\", linewidth = 1) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.3 Sample variance and standard deviation\n\nIn order to assess how well the mean represents the data, it is instructive to compute the variance var() and the standard deviation sd() for a sample.\nThe sample variance is defined as\n\n\\[s^2 = \\frac{1}{n}\\sum_{i=1}^n{(x_i - \\bar{x})^2}. \\]\n\n# Using var()\nvar(cl.order$LEN_MC)\n\n[1] 25.12585\n\n# or by hand:\n\nsample_data &lt;- cl.order$LEN_MC\n\n# Calculate the sample standard deviation\n\nvar &lt;- 1 / length(sample_data) * sum((sample_data - mean(sample_data))^2) # formula above\n\n# Note that R's var() function applies an additional bias correction measure:\n\nvar_corrected &lt;- 1 / (length(sample_data) - 1) * sum((sample_data - mean(sample_data))^2) # equivalent to var()\n\n\nCorrespondingly, the standard deviation of the mean is the square root of the variance (cf. Heumann, Schomaker, and Shalabh 2022: 51-2):\n\n\\[ s = \\sqrt{\\frac{1}{n}\\sum_{i=1}^n{(x_i - \\bar{x})^2}} \\]\n\n# Using sd()\nsd(cl.order$LEN_MC)\n\n[1] 5.012569\n\n# or by hand:\n\nsample_data &lt;- cl.order$LEN_MC\n\n# Calculate the sample standard deviation\n\nsd &lt;- sqrt(1 / (length(sample_data) - 1)* sum((sample_data - mean(sample_data))^2))\n\nApplication and visualisation:\n\nExample 1Example 2\n\n\n\ncl.length.hist +\n  # Add verticle line for the mean\n  geom_vline(aes(xintercept = mean(LEN_MC)), color = \"steelblue\", linewidth = 1) +\n  # Add -1sd\n  geom_vline(aes(xintercept = mean(LEN_MC) - sd(LEN_MC)), color = \"orange\", linewidth = 1) +\n  # Add +1sd\n  geom_vline(aes(xintercept = mean(LEN_MC) + sd(LEN_MC)), color = \"orange\", linewidth = 1) +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n# Create data frame with mean and sd for each clause ORDER\n\ncl.order %&gt;% \n  # Select variables of interest\n  select(ORDER, LEN_MC) %&gt;% \n  # Group results of following operations by ORDER\n  group_by(ORDER) %&gt;% \n    # Create grouped summary of mean and sd for each ORDER\n    summarise(mean = mean(LEN_MC),\n                sd = sd(LEN_MC)) -&gt; cl_mean_sd; cl_mean_sd\n\n# A tibble: 2 × 3\n  ORDER  mean    sd\n  &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;\n1 mc-sc  9.04  4.91\n2 sc-mc  9.75  5.22\n\n# Plot results \n\nggplot(cl_mean_sd, aes(x = ORDER, y = mean)) +\n  # Barplot with a specific variable mapped onto y-axis\n  geom_col() +\n  # Add mean and standard deviation to the plot\n  geom_errorbar(aes(x = ORDER,\n                    ymin = mean-sd,\n                    ymax = mean+sd), width = .2) +\n  theme_classic() +\n  labs(y = \"Mean length of main clauses\", x = \"Clause order\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.1.4 Quantiles\n\nWhile median() divides the data into two equal sets (i.e., two 50% quantiles), the quantile() function makes it possible to partition the data further.\n\nquantile(cl.order$LEN_MC)\n\n  0%  25%  50%  75% 100% \n   2    6    8   11   31 \n\n\nquantile(x, 0) and quantile(x, 1) thus show the minimum and maximum values, respectively.\n\nquantile(cl.order$LEN_MC, 0)\n\n0% \n 2 \n\nquantile(cl.order$LEN_MC, 1)\n\n100% \n  31 \n\n\n\n\n\n3.1.5 Quartiles and boxplots\n\n\n\nThe structure of the boxplot (Wickham, Çetinkaya-Rundel, and Grolemund 2023: Chapter 2.3.1)\n\n\n\nConsider the distribution of clause length by clause order:\n\n\nVersion 1Version 2\n\n\n\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_boxplot() +\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\nggplot(cl.order, aes(x = ORDER, y = LEN_MC)) +\n  geom_boxplot() +\n  geom_jitter() + # add data points \n  theme_classic()\n\n\n\n\n\n\n\n\n\n\n\n\nCompare it to the corresponding rotated density plot:\n\n\nggplot(cl.order, aes(x = LEN_MC, fill = ORDER)) +\n  geom_density(alpha = 0.5) +\n  coord_flip() +\n  theme_classic()",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary statistics: Theory and practice</span>"
    ]
  },
  {
    "objectID": "Summary_statistics.html#theoretical-distributions",
    "href": "Summary_statistics.html#theoretical-distributions",
    "title": "3  Summary statistics: Theory and practice",
    "section": "3.2 Theoretical distributions",
    "text": "3.2 Theoretical distributions\n\n3.2.1 The normal distribution\nA great number of numerical variables in the world follow the well-known normal (or Gaussian) distribution, which includes test scores, weight and height, among many others.\nIf a random variable \\(X\\) is normally distributed, it is determined by the parameters \\(\\mu\\) (the mean) and \\(\\sigma\\) (the standard deviation). Formally, we can summarise this using the notation\n\\[ X \\sim N(\\mu, \\sigma^2).\\] The probability density function (PDF) of the normal distribution has a characteristic bell-shape. The density values on the \\(y\\)-axis indicate the likelihood of encountering a specific value of \\(X\\) (cf. Winter 2020: 56; Heumann, Schomaker, and Shalabh 2022: 173-177).\n\n\n\n\n\n\n\n\n\n\n\n3.2.2 Bernoulli distribution\nThe Bernoulli distribution is a discrete probability distribution for random variables which have only two possible outcomes: “positive” (often coded as 1) and “negative” (often coded as 0). Examples of such variables include coin tosses (heads/tails), binary response questions (yes/no), and defect status (defective/non-defective).\nIf a random variable \\(X\\) follows a Bernoulli distribution, it is determined by the parameter \\(p\\), which is the probability of the positive case:\n\\[ X \\sim Bernoulli(p).\\] The probability mass function (PMF) of the Bernoulli distribution is given by: \\[\nP(X = x) =\n\\begin{cases}\np & \\text{if } x = 1 \\\\\n1 - p & \\text{if } x = 0\n\\end{cases}\n\\]\nwhere \\(0 \\leq p \\leq 1\\). This function shows the probability of \\(X\\) taking on the value of 1 or 0 (cf. Heumann, Schomaker, and Shalabh 2022: 162-163).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nExtensions\n\n\n\nA Bernoulli experiment presupposes a single trial (e.g., tossing a coin once). If we are interested in the distribution of a binary discrete variable over \\(n\\) Bernoulli trials, we can describe it in terms of the binomial distribution (Heumann, Schomaker, and Shalabh 2022: 163-166).\nCategorical variables with more than 2 outcomes and \\(n\\) Bernoulli trials can be modelled using the multinomial distribution (Heumann, Schomaker, and Shalabh 2022: 167-169).",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary statistics: Theory and practice</span>"
    ]
  },
  {
    "objectID": "Summary_statistics.html#references",
    "href": "Summary_statistics.html#references",
    "title": "3  Summary statistics: Theory and practice",
    "section": "3.3 References",
    "text": "3.3 References\n\n\nHeumann, Christian, Michael Schomaker, and Shalabh. 2022. Introduction to Statistics and Data Analysis: With Exercises, Solutions and Applications in r. 2nd ed. Cham: Springer. https://doi.org/10.1007/978-3-031-11833-3.\n\n\nWickham, Hadley, Mine Çetinkaya-Rundel, and Garrett Grolemund. 2023. R for Data Science: Import, Tidy, Transform, Visualize, and Model Data. Beijing: O’Reilly. https://r4ds.hadley.nz.\n\n\nWinter, Bodo. 2020. Statistics for Linguists: An Introduction Using r. New York; London: Routledge.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Summary statistics: Theory and practice</span>"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "4  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n1 + 1\n\n[1] 2\n\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "5  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever.\n\n1 + 1\n\n[1] 2",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Summary</span>"
    ]
  }
]